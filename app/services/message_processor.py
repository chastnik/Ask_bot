"""
–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Ask Bot
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
"""
import re
from typing import Dict, Any, Optional
from loguru import logger

from app.services.jira_service import jira_service, JiraAPIError, JiraAuthError
from app.services.llm_service import llm_service
from app.services.cache_service import cache_service
from app.services.mattermost_service import mattermost_service
from app.services.chart_service import chart_service
from app.services.conversation_service import get_conversation_service
from app.config import settings
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine


class MessageProcessor:
    """–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Ask Bot"""
    
    def __init__(self):
        self.commands = {
            '–ø–æ–º–æ—â—å': self._handle_help,
            'help': self._handle_help,
            '–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è': self._handle_auth,
            'auth': self._handle_auth,
            '—Å—Ç–∞—Ç—É—Å': self._handle_status,
            'status': self._handle_status,
            '–ø—Ä–æ–µ–∫—Ç—ã': self._handle_projects,
            'projects': self._handle_projects,
            '–∫–µ—à': self._handle_cache,
            'cache': self._handle_cache,
            '–Ω–∞—É—á–∏': self._handle_teach,
            'teach': self._handle_teach,
            '–º–∞–ø–ø–∏–Ω–≥–∏': self._handle_mappings,
            'mappings': self._handle_mappings,
            '–æ–±–Ω–æ–≤–∏—Ç—å': self._handle_refresh_dictionaries,
            'refresh': self._handle_refresh_dictionaries,
        }
    
    def _format_issue_link(self, issue_key: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞—á—É –≤ Jira
        
        Args:
            issue_key: –ö–ª—é—á –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, PROJECT-123)
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è Markdown —Å—Å—ã–ª–∫–∞
        """
        jira_base_url = settings.jira_base_url.rstrip('/')
        issue_link = f"{jira_base_url}/browse/{issue_key}"
        return f"[**{issue_key}**]({issue_link})"
    
    async def _enrich_query_with_context(self, user_id: str, query: str, channel_id: Optional[str] = None) -> tuple[str, Dict[str, Any]]:
        """–û–±–æ–≥–∞—â–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            engine = create_async_engine(settings.database_url)
            async with AsyncSession(engine) as db_session:
                conv_service = await get_conversation_service(db_session)
                return await conv_service.enrich_query_with_context(user_id, query, channel_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return query, {}
        finally:
            if 'engine' in locals():
                await engine.dispose()
    
    async def _save_conversation_context(
        self, 
        user_id: str, 
        query: str, 
        intent: Dict[str, Any], 
        response: str,
        entities: Optional[Dict[str, Any]] = None,
        channel_id: Optional[str] = None
    ) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã"""
        try:
            engine = create_async_engine(settings.database_url)
            async with AsyncSession(engine) as db_session:
                conv_service = await get_conversation_service(db_session)
                return await conv_service.save_context(user_id, query, intent, response, entities, channel_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return False
        finally:
            if 'engine' in locals():
                await engine.dispose()
    
    async def process_message(self, user_id: str, message: str) -> str:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)
        """
        response_text, _ = await self.process_message_with_files(user_id, message)
        return response_text

    async def process_message_with_files(self, user_id: str, message: str) -> tuple[str, Optional[str]]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            –û—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            message = message.strip()
            
            if not message:
                return "", None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
            command_result = await self._try_handle_command(user_id, message)
            if command_result:
                return command_result, None
            
            # –ï—Å–ª–∏ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –∫ Jira
            return await self._handle_jira_query(user_id, message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_id}: {e}")
            return f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}", None
    
    async def _try_handle_command(self, user_id: str, message: str) -> Optional[str]:
        """–ü—ã—Ç–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –∫–æ–º–∞–Ω–¥—É"""
        words = message.lower().split()
        
        if not words:
            return None
        
        first_word = words[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
        if first_word in self.commands:
            return await self.commands[first_word](user_id, message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤
        if len(words) >= 2:
            two_words = f"{words[0]} {words[1]}"
            if two_words in self.commands:
                return await self.commands[two_words](user_id, message)
        
        return None
    
    async def _handle_help(self, user_id: str, message: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏"""
        return """
ü§ñ **Ask Bot - –í–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ Jira**

**üí¨ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ!

**üìù –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ "–ü–æ–∫–∞–∂–∏ –º–æ–∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏"
‚Ä¢ "–°–∫–æ–ª—å–∫–æ –±–∞–≥–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ PROJECT_KEY?"
‚Ä¢ "–ó–∞–¥–∞—á–∏ –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –ø—Ä–æ–µ–∫—Ç–µ ABC"
‚Ä¢ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü"
‚Ä¢ "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ XYZ"

**‚öôÔ∏è –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `–ø–æ–º–æ—â—å` - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ `–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è [–ª–æ–≥–∏–Ω] [–ø–∞—Ä–æ–ª—å/—Ç–æ–∫–µ–Ω]` - –≤–æ–π—Ç–∏ –≤ Jira
‚Ä¢ `—Å—Ç–∞—Ç—É—Å` - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
‚Ä¢ `–ø—Ä–æ–µ–∫—Ç—ã` - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
‚Ä¢ `–∫–µ—à –æ—á–∏—Å—Ç–∏—Ç—å` - –æ—á–∏—Å—Ç–∏—Ç—å –∫–µ—à
‚Ä¢ `–∫–µ—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞

**üéì –û–±—É—á–µ–Ω–∏–µ –±–æ—Ç–∞:**
‚Ä¢ `–Ω–∞—É—á–∏ –∫–ª–∏–µ–Ω—Ç "–ù–∞–∑–≤–∞–Ω–∏–µ" –ø—Ä–æ–µ–∫—Ç "–ö–õ–Æ–ß"` - –Ω–∞—É—á–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—é –∫–ª–∏–µ–Ω—Ç‚Üí–ø—Ä–æ–µ–∫—Ç
‚Ä¢ `–Ω–∞—É—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–ò–º—è" username "login"` - –Ω–∞—É—á–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—é –∏–º—è‚Üíusername
‚Ä¢ `–º–∞–ø–ø–∏–Ω–≥–∏` - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
‚Ä¢ `–æ–±–Ω–æ–≤–∏—Ç—å` - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ Jira

**üìä –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤:**
–î–æ–±–∞–≤—å—Ç–µ "–ø–æ–∫–∞–∂–∏ –∫–∞–∫ –≥—Ä–∞—Ñ–∏–∫" –∫ –ª—é–±–æ–º—É –∑–∞–ø—Ä–æ—Å—É –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏!

–ü—Ä–∏–º–µ—Ä: "–ó–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –≤ –ø—Ä–æ–µ–∫—Ç–µ ABC –ø–æ–∫–∞–∂–∏ –∫–∞–∫ –≥—Ä–∞—Ñ–∏–∫"
"""
    
    async def _handle_auth(self, user_id: str, message: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        parts = message.strip().split()
        
        if len(parts) < 3:
            return """
üîê **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Jira**

**–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:**
`–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è [–ª–æ–≥–∏–Ω] [–ø–∞—Ä–æ–ª—å/—Ç–æ–∫–µ–Ω]`

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ `–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è user@company.com mypassword`
‚Ä¢ `–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è username api_token_here`

**–î–ª—è Jira Cloud —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API —Ç–æ–∫–µ–Ω –≤–º–µ—Å—Ç–æ –ø–∞—Ä–æ–ª—è.**
"""
        
        username = parts[1]
        password = parts[2]
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Jira (—Ç–æ–∫–µ–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å)
            async with jira_service as jira:
                # –ü—ã—Ç–∞–µ–º—Å—è —Å–Ω–∞—á–∞–ª–∞ –∫–∞–∫ —Ç–æ–∫–µ–Ω, –ø–æ—Ç–æ–º –∫–∞–∫ –ø–∞—Ä–æ–ª—å
                test_result = await jira.test_connection(username, token=password)
                if not test_result:
                    test_result = await jira.test_connection(username, password=password)

            if test_result:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à–µ
                async with cache_service as cache:
                    credentials = {"username": username, "password": password}
                    await cache.cache_user_credentials(user_id, credentials)
                
                return f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Jira –∫–∞–∫ **{username}**"
            else:
                return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Jira. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å/—Ç–æ–∫–µ–Ω."
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}"
    
    async def _handle_status(self, user_id: str, message: str) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        try:
            async with cache_service as cache:
                credentials = await cache.get_cached_user_credentials(user_id)
                
            if credentials:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ –µ—â–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã
                async with jira_service as jira:
                    # –ü—ã—Ç–∞–µ–º—Å—è —Å–Ω–∞—á–∞–ª–∞ –∫–∞–∫ —Ç–æ–∫–µ–Ω, –ø–æ—Ç–æ–º –∫–∞–∫ –ø–∞—Ä–æ–ª—å
                    test_result = await jira.test_connection(
                        credentials['username'],
                        token=credentials['password']
                    )
                    if not test_result:
                        test_result = await jira.test_connection(
                            credentials['username'],
                            password=credentials['password']
                        )
                
                if test_result:
                    return f"‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Jira –∫–∞–∫ **{credentials['username']}**"
                else:
                    # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    async with cache_service as cache:
                        await cache.invalidate_user_cache(user_id)
                    return "‚ùå –í–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é."
            else:
                return """
‚ùå **–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Jira**

–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
`–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è [–ª–æ–≥–∏–Ω] [–ø–∞—Ä–æ–ª—å/—Ç–æ–∫–µ–Ω]`
"""
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"
    
    async def _handle_projects(self, user_id: str, message: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        try:
            async with cache_service as cache:
                credentials = await cache.get_cached_user_credentials(user_id)
                
            if not credentials:
                return "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Jira. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è [–ª–æ–≥–∏–Ω] [–ø–∞—Ä–æ–ª—å]`"
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
            async with jira_service as jira:
                projects = await jira.get_projects(
                    credentials['username'],
                    credentials['password']
                )
            
            if projects:
                projects_text = "üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã Jira:**\n\n"
                for project in projects[:20]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
                    projects_text += f"‚Ä¢ **{project.get('key')}** - {project.get('name')}\n"
                
                if len(projects) > 20:
                    projects_text += f"\n... –∏ –µ—â–µ {len(projects) - 20} –ø—Ä–æ–µ–∫—Ç–æ–≤"
                    
                return projects_text
            else:
                return "üìã –ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∏–º."
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤: {str(e)}"
    
    async def _handle_cache(self, user_id: str, message: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∫–µ—à–∞"""
        if '–æ—á–∏—Å—Ç–∏—Ç—å' in message or 'clear' in message:
            try:
                async with cache_service as cache:
                    await cache.invalidate_user_cache(user_id)
                return "‚úÖ –í–∞—à –∫–µ—à –æ—á–∏—â–µ–Ω"
            except Exception as e:
                return f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞: {str(e)}"
                
        elif '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫' in message or 'stats' in message:
            try:
                async with cache_service as cache:
                    stats = await cache.get_cache_stats()
                
                stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞:**

‚Ä¢ **–í—Å–µ–≥–æ –∫–ª—é—á–µ–π:** {stats.get('total_keys', 0)}
‚Ä¢ **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:** {stats.get('memory_usage', 'N/A')}
‚Ä¢ **Hit Rate:** {stats.get('hit_rate', 0)}%

**–¢–∏–ø—ã –∫–ª—é—á–µ–π:**
"""
                for key_type, count in stats.get('key_types', {}).items():
                    stats_text += f"‚Ä¢ {key_type}: {count}\n"
                    
                return stats_text
                
            except Exception as e:
                return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
        else:
            return """
**–ö–æ–º–∞–Ω–¥—ã –∫–µ—à–∞:**
‚Ä¢ `–∫–µ—à –æ—á–∏—Å—Ç–∏—Ç—å` - –æ—á–∏—Å—Ç–∏—Ç—å –≤–∞—à –∫–µ—à
‚Ä¢ `–∫–µ—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞` - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞
"""
    
    async def _handle_jira_query(self, user_id: str, query: str) -> tuple[str, Optional[str]]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Jira"""
        try:
            # –û–±–æ–≥–∞—â–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            enriched_query, context_entities = await self._enrich_query_with_context(user_id, query)
            logger.info(f"–ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {query}")
            logger.info(f"–û–±–æ–≥–∞—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {enriched_query}")
            logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏: {context_entities}")
            
            # –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–µ—à–∞
            async with cache_service as cache:
                credentials = await cache.get_cached_user_credentials(user_id)
                
            if not credentials:
                return """
‚ùå **–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Jira**

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
`–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è [–ª–æ–≥–∏–Ω] [–ø–∞—Ä–æ–ª—å/—Ç–æ–∫–µ–Ω]`

–ü—Ä–∏–º–µ—Ä: `–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è user@company.com mytoken`
""", None

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é LLM (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å)
            try:
                async with llm_service as llm:
                    intent = await llm.interpret_query_intent(enriched_query)
                
                # –î–æ–ø–æ–ª–Ω—è–µ–º intent –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º–∏ —Å—É—â–Ω–æ—Å—Ç—è–º–∏
                if context_entities:
                    if "parameters" not in intent:
                        intent["parameters"] = {}
                    intent["parameters"].update(context_entities)
                
                logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω intent: {intent}")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ intent: {e}")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –∫–∞–∫ fallback
                async with llm_service as llm:
                    intent = llm._simple_intent_analysis(enriched_query)
                    
                # –î–æ–ø–æ–ª–Ω—è–µ–º intent –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º–∏ —Å—É—â–Ω–æ—Å—Ç—è–º–∏ –¥–ª—è fallback —Ç–æ–∂–µ
                if context_entities:
                    if "parameters" not in intent:
                        intent["parameters"] = {}
                    intent["parameters"].update(context_entities)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–ø–ø–∏–Ω–≥–∏ –∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ Jira –∏–∑ –∫–µ—à–∞
            try:
                async with cache_service as cache:
                    client_mappings = await cache.get_all_client_mappings()
                    user_mappings = await cache.get_all_user_mappings()
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ Jira
                    jira_dictionaries = await cache.get_all_jira_dictionaries(user_id)
                    
                    # –ï—Å–ª–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –ø—É—Å—Ç—ã–µ - –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö
                    if not any(jira_dictionaries.values()):
                        logger.info(f"–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ Jira –ø—É—Å—Ç—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –æ–±–Ω–æ–≤–ª—è–µ–º...")
                        refresh_success = await self._refresh_jira_dictionaries(user_id)
                        if refresh_success:
                            jira_dictionaries = await cache.get_all_jira_dictionaries(user_id)
                
                # –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏
                logger.info(f"Client mappings type: {type(client_mappings)}, value: {client_mappings}")
                logger.info(f"User mappings type: {type(user_mappings)}, value: {user_mappings}")
                logger.info(f"Jira dictionaries loaded: {', '.join([f'{k}({len(v)})' for k, v in jira_dictionaries.items()])}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if not isinstance(client_mappings, dict):
                    logger.warning(f"client_mappings –Ω–µ —Å–ª–æ–≤–∞—Ä—å: {type(client_mappings)}, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å")
                    client_mappings = {}
                if not isinstance(user_mappings, dict):
                    logger.warning(f"user_mappings –Ω–µ —Å–ª–æ–≤–∞—Ä—å: {type(user_mappings)}, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å")
                    user_mappings = {}
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –Ω–∞–º–µ—Ä–µ–Ω–∏—è
                intent_type = intent.get("intent", "search")
                
                # –î–ª—è worklog –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                if intent_type == "worklog":
                    logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º worklog –∑–∞–ø—Ä–æ—Å: {intent}")
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º assignee –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ intent
                    assignee = intent.get("parameters", {}).get("assignee")
                    if not assignee:
                        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç.", None
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JQL –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    jql = f"assignee = \"{assignee}\" OR assignee was \"{assignee}\""
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
                    time_period = intent.get("parameters", {}).get("time_period")
                    if time_period:
                        # –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞ –¥–ª—è JQL
                        month_mapping = {
                            "—è–Ω–≤–∞—Ä—å": "01", "—Ñ–µ–≤—Ä–∞–ª—å": "02", "–º–∞—Ä—Ç": "03", "–∞–ø—Ä–µ–ª—å": "04",
                            "–º–∞–π": "05", "–∏—é–Ω—å": "06", "–∏—é–ª—å": "07", "–∞–≤–≥—É—Å—Ç": "08",
                            "—Å–µ–Ω—Ç—è–±—Ä—å": "09", "–æ–∫—Ç—è–±—Ä—å": "10", "–Ω–æ—è–±—Ä—å": "11", "–¥–µ–∫–∞–±—Ä—å": "12"
                        }
                        
                        current_year = "2024"  # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º
                        for month_ru, month_num in month_mapping.items():
                            if month_ru in time_period.lower():
                                jql += f" AND worklogDate >= \"{current_year}-{month_num}-01\" AND worklogDate <= \"{current_year}-{month_num}-31\""
                                break
                
                else:
                    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é JQL —á–µ—Ä–µ–∑ LLM
                    user_context = {
                        "projects": jira_dictionaries.get("projects", []), 
                        "clients": list(client_mappings.keys()),
                        "users": list(user_mappings.keys()),
                        "client_mappings": client_mappings,
                        "user_mappings": user_mappings,
                        "jira_dictionaries": jira_dictionaries
                    }
                    
                    async with llm_service as llm:
                        jql = await llm.generate_jql_query(query, user_context)
                    logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω JQL: {jql}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥
                    if jql and jql.startswith("UNKNOWN_CLIENT:"):
                        client_name = jql.replace("UNKNOWN_CLIENT:", "")
                        response = await self._ask_for_client_mapping(user_id, client_name)
                        return response, None
                    elif jql and jql.startswith("UNKNOWN_USER:"):
                        user_name = jql.replace("UNKNOWN_USER:", "")
                        response = await self._resolve_user_mapping(user_id, user_name, query)
                        return response, None
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ JQL: {e}")
                return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å: {str(e)}", None
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Jira
            try:
                async with jira_service as jira:
                    issues = await jira.search_issues(
                        jql,
                        credentials['username'],
                        credentials['password'],
                        max_results=1000  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
                    )
                
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {issues.total if issues else 0}")

            except JiraAuthError:
                # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                async with cache_service as cache:
                    await cache.invalidate_user_cache(user_id)
                return "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Jira. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.", None
            except JiraAPIError as e:
                return f"‚ùå –û—à–∏–±–∫–∞ Jira API: {str(e)}", None

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if not issues or not issues.issues:
                intent_type = intent.get("intent", "search")
                if intent_type == "analytics":
                    # –î–ª—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–∞–∂–µ –ø—Ä–∏ 0 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
                    empty_issues = type('EmptyIssues', (), {'total': 0, 'issues': []})()
                    response_text = await self._format_analytics_response(empty_issues, intent, query)
                    return response_text, None
                else:
                    return "üìã –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", None

            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω
            chart_file_path = None
            if intent.get("needs_chart", False):
                try:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
                    group_by = intent.get("parameters", {}).get("group_by", "status")
                    chart_type = intent.get("parameters", {}).get("chart_type", "bar")
                    
                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–æ–ª—é
                    group_count = {}
                    group_label = "—Å—Ç–∞—Ç—É—Å–∞–º"  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    
                    for issue in issues.issues:
                        if group_by == "project":
                            key = getattr(issue, 'project_key', issue.key.split('-')[0])
                            group_label = "–ø—Ä–æ–µ–∫—Ç–∞–º"
                        elif group_by == "priority":
                            key = getattr(issue, 'priority', '–ù–µ —É–∫–∞–∑–∞–Ω')
                            group_label = "–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º"
                        elif group_by == "assignee":
                            key = getattr(issue, 'assignee', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')
                            group_label = "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º"
                        elif group_by == "issue_type":
                            key = getattr(issue, 'issue_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø')
                            group_label = "—Ç–∏–ø–∞–º –∑–∞–¥–∞—á"
                        else:  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é status
                            key = issue.status
                            group_label = "—Å—Ç–∞—Ç—É—Å–∞–º"
                        
                        group_count[key] = group_count.get(key, 0) + 1
                    
                    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
                    chart_data = []
                    for name, count in group_count.items():
                        chart_data.append({
                            'name': name,
                            'value': count,
                            'category': name
                        })
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    chart_title = f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ {group_label}"
                    
                    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                    if chart_type == "pie":
                        chart_file_path = await chart_service.create_pie_chart(chart_data, chart_title, "value", "name")
                    elif chart_type == "line":
                        chart_file_path = await chart_service.create_line_chart(chart_data, chart_title, "name", "value")
                    else:  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç–æ–ª–±—á–∞—Ç—ã–π –≥—Ä–∞—Ñ–∏–∫
                        chart_file_path = await chart_service.create_bar_chart(chart_data, chart_title, "name", "value")
                    logger.info(f"–°–æ–∑–¥–∞–Ω –≥—Ä–∞—Ñ–∏–∫: {chart_file_path}")
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –≥—Ä–∞—Ñ–∏–∫–∞

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            intent_type = intent.get("intent", "search")
            
            if intent_type == "analytics":
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç
                response_text = await self._format_analytics_response(issues, intent, query)
            elif intent_type == "worklog":
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç–∞–º
                response_text = await self._format_worklog_response(issues, intent, query, user_id)
            else:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º
                response_text = f"üìã **–ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á:** {issues.total}\n\n"
                
                for issue in issues.issues[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 10 –∑–∞–¥–∞—á
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞—á—É
                    issue_link = self._format_issue_link(issue.key)
                    response_text += f"‚Ä¢ {issue_link} - {issue.summary}\n"
                    response_text += f"  –°—Ç–∞—Ç—É—Å: {issue.status}\n\n"

                if issues.total > 10:
                    response_text += f"... –∏ –µ—â–µ {issues.total - 10} –∑–∞–¥–∞—á(–∏)"

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã
            try:
                await self._save_conversation_context(
                    user_id=user_id,
                    query=query,
                    intent=intent,
                    response=response_text,
                    entities=intent.get("parameters", {})
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ—Å–µ–¥—ã: {e}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≥—Ä–∞—Ñ–∏–∫–∞
            return response_text, chart_file_path
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç {user_id}: {e}")
            return f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}", None

    async def _refresh_jira_dictionaries(self, user_id: str) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ Jira –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            True –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with cache_service as cache:
                credentials = await cache.get_cached_user_credentials(user_id)
                
            if not credentials:
                logger.warning(f"–ù–µ—Ç —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –Ω–µ –º–æ–∂–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –∏–∑ Jira
            async with jira_service as jira:
                dictionaries = await jira.get_all_dictionaries(
                    credentials['username'],
                    credentials['password']
                )
            
            # –ö—ç—à–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫
            async with cache_service as cache:
                for dict_type, data in dictionaries.items():
                    await cache.cache_jira_dictionary(dict_type, data, user_id)
            
            logger.info(f"–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ Jira –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {', '.join([f'{k}({len(v)})' for k, v in dictionaries.items()])}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    async def _ask_for_client_mapping(self, user_id: str, client_name: str) -> str:
        """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–∞–ø–ø–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç"""
        return f"""
ü§î **–Ø –Ω–µ –∑–Ω–∞—é, –∫–∞–∫–æ–π –ø—Ä–æ–µ–∫—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–ª–∏–µ–Ω—Ç—É "{client_name}"**

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—É—á–∏—Ç–µ –º–µ–Ω—è! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
`–Ω–∞—É—á–∏ –∫–ª–∏–µ–Ω—Ç "{client_name}" –ø—Ä–æ–µ–∫—Ç "–ö–õ–Æ–ß_–ü–†–û–ï–ö–¢–ê"`

**–ü—Ä–∏–º–µ—Ä:**
`–Ω–∞—É—á–∏ –∫–ª–∏–µ–Ω—Ç "–ò–ª—å –¥–µ –ë–æ—Ç—ç" –ø—Ä–æ–µ–∫—Ç "IDB"`

–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —è —Å–º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.
"""

    async def _resolve_user_mapping(self, user_id: str, display_name: str, original_query: str) -> str:
        """–ò—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Jira –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –∏–ª–∏ –æ–±—É—á–µ–Ω–∏–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with cache_service as cache:
                credentials = await cache.get_cached_user_credentials(user_id)
            
            if not credentials:
                return "‚ùå –î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Jira."
            
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Jira
            async with jira_service as jira:
                found_user = await jira.find_user_by_display_name(
                    display_name, 
                    credentials['username'], 
                    token=credentials['password']
                )
            
            if found_user:
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥
                jira_username = found_user.get('name', '')
                jira_display_name = found_user.get('displayName', display_name)
                
                async with cache_service as cache:
                    await cache.save_user_username_mapping(
                        jira_display_name, jira_username, user_id
                    )
                
                logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω –º–∞–ø–ø–∏–Ω–≥: {jira_display_name} ‚Üí {jira_username}")
                
                # –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                return f"""‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: **{jira_display_name}** ‚Üí `{jira_username}`

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...

""" + await self._handle_jira_query(user_id, original_query)
            
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ—Å–∏–º –Ω–∞—É—á–∏—Ç—å
                return f"""
ü§î **–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "{display_name}" –≤ Jira**

–í–æ–∑–º–æ–∂–Ω–æ, –∏–º—è –Ω–∞–ø–∏—Å–∞–Ω–æ –Ω–µ —Ç–æ—á–Ω–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–æ–µ –∏–º—è.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—É—á–∏—Ç–µ –º–µ–Ω—è:
`–Ω–∞—É—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "{display_name}" username "jira_username"`

**–ü—Ä–∏–º–µ—Ä:**
`–Ω–∞—É—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–û–ª–µ–≥ –ê–Ω—Ç–æ–Ω–æ–≤" username "olegantov"`

–ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å —Ç–æ—á–Ω–æ–µ –∏–º—è –≤ Jira –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ.
"""
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {display_name}: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}"

    async def _handle_teach(self, user_id: str, message: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ–±—É—á–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞–º"""
        try:
            # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É –æ–±—É—á–µ–Ω–∏—è
            parts = message.strip().split()
            
            if len(parts) < 5:
                return """
üéì **–ö–æ–º–∞–Ω–¥—ã –æ–±—É—á–µ–Ω–∏—è:**

**–ö–ª–∏–µ–Ω—Ç ‚Üí –ü—Ä–æ–µ–∫—Ç:**
`–Ω–∞—É—á–∏ –∫–ª–∏–µ–Ω—Ç "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞" –ø—Ä–æ–µ–∫—Ç "–ö–õ–Æ–ß_–ü–†–û–ï–ö–¢–ê"`

**–ò–º—è ‚Üí Username:**
`–Ω–∞—É—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–ò–º—è –§–∞–º–∏–ª–∏—è" username "jira_username"`

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ `–Ω–∞—É—á–∏ –∫–ª–∏–µ–Ω—Ç "–ò–ª—å –¥–µ –ë–æ—Ç—ç" –ø—Ä–æ–µ–∫—Ç "IDB"`
‚Ä¢ `–Ω–∞—É—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–°—Ç–∞–Ω–∏—Å–ª–∞–≤ –ß–∞—à–∏–Ω" username "svchashin"`
"""

            mapping_type = parts[1].lower()
            
            if mapping_type == "–∫–ª–∏–µ–Ω—Ç" and len(parts) >= 5:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∫–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞
                import re
                # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ —Å –∫–∞–≤—ã—á–∫–∞–º–∏, —Ç–∞–∫ –∏ –±–µ–∑ –Ω–∏—Ö
                client_match = re.search(r'–∫–ª–∏–µ–Ω—Ç\s+(?:"([^"]+)"|(\S+))', message, re.IGNORECASE)
                project_match = re.search(r'–ø—Ä–æ–µ–∫—Ç\s+(?:"([^"]+)"|(\S+))', message, re.IGNORECASE)
                
                if client_match and project_match:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –≥—Ä—É–ø–ø—É (—Å –∫–∞–≤—ã—á–∫–∞–º–∏ –∏–ª–∏ –±–µ–∑)
                    client_name = client_match.group(1) or client_match.group(2)
                    project_key = project_match.group(1) or project_match.group(2)
                    
                    async with cache_service as cache:
                        success = await cache.save_client_project_mapping(
                            client_name, project_key, user_id
                        )
                    
                    if success:
                        return f'‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –∑–Ω–∞—é, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç **"{client_name}"** —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ–µ–∫—Ç—É **"{project_key}"**'
                    else:
                        return "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞"
                        
            elif mapping_type == "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" and len(parts) >= 5:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏ username
                import re
                # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ —Å –∫–∞–≤—ã—á–∫–∞–º–∏, —Ç–∞–∫ –∏ –±–µ–∑ –Ω–∏—Ö
                name_match = re.search(r'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\s+(?:"([^"]+)"|(\S+(?:\s+\S+)*))', message, re.IGNORECASE)
                username_match = re.search(r'username\s+(?:"([^"]+)"|(\S+))', message, re.IGNORECASE)
                
                if name_match and username_match:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –≥—Ä—É–ø–ø—É (—Å –∫–∞–≤—ã—á–∫–∞–º–∏ –∏–ª–∏ –±–µ–∑)
                    display_name = name_match.group(1) or name_match.group(2)
                    username = username_match.group(1) or username_match.group(2)
                    
                    async with cache_service as cache:
                        success = await cache.save_user_username_mapping(
                            display_name, username, user_id
                        )
                    
                    if success:
                        return f'‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –∑–Ω–∞—é, —á—Ç–æ **"{display_name}"** —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç username **"{username}"**'
                    else:
                        return "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞"
            
            return "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `–Ω–∞—É—á–∏` –¥–ª—è –ø–æ–º–æ—â–∏."
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {str(e)}"

    async def _handle_mappings(self, user_id: str, message: str) -> str:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏"""
        try:
            async with cache_service as cache:
                client_mappings = await cache.get_all_client_mappings()
                user_mappings = await cache.get_all_user_mappings()
            
            response = "üìã **–ò–∑–≤–µ—Å—Ç–Ω—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏:**\n\n"
            
            if client_mappings:
                response += "**–ö–ª–∏–µ–Ω—Ç—ã ‚Üí –ü—Ä–æ–µ–∫—Ç—ã:**\n"
                for client, project in client_mappings.items():
                    response += f"‚Ä¢ **{client}** ‚Üí `{project}`\n"
                response += "\n"
            else:
                response += "**–ö–ª–∏–µ–Ω—Ç—ã ‚Üí –ü—Ä–æ–µ–∫—Ç—ã:** –ü–æ–∫–∞ –Ω–µ—Ç\n\n"
            
            if user_mappings:
                response += "**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ‚Üí Username:**\n"
                for display_name, username in user_mappings.items():
                    response += f"‚Ä¢ **{display_name}** ‚Üí `{username}`\n"
            else:
                response += "**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ‚Üí Username:** –ü–æ–∫–∞ –Ω–µ—Ç\n"
            
            response += "\nüí° –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –º–∞–ø–ø–∏–Ω–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `–Ω–∞—É—á–∏`"
            
            return response
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞–ø–ø–∏–Ω–≥–æ–≤: {str(e)}"


    async def _handle_refresh_dictionaries(self, user_id: str, message: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤"""
        try:
            # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
            async with cache_service as cache:
                await cache.invalidate_jira_dictionaries(user_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
            success = await self._refresh_jira_dictionaries(user_id)
            
            if success:
                return """
‚úÖ **–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ Jira –æ–±–Ω–æ–≤–ª–µ–Ω—ã-30 app/services/message_processor.py*

–ó–∞–≥—Ä—É–∂–µ–Ω—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
‚Ä¢ –°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á
‚Ä¢ –¢–∏–ø—ã –∑–∞–¥–∞—á  
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
‚Ä¢ –ü—Ä–æ–µ–∫—Ç—ã

–¢–µ–ø–µ—Ä—å JQL –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏.
"""
            else:
                return "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ Jira."
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤: {str(e)}"

    async def _format_analytics_response(self, issues, intent: Dict[str, Any], original_query: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
        
        Args:
            issues: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏–∑ Jira
            intent: –ù–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            original_query: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
            group_by = intent.get("parameters", {}).get("group_by", "status")
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Å—á–µ—Ç –±–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
            if "—Å–∫–æ–ª—å–∫–æ" in original_query.lower() or "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ" in original_query.lower():
                return self._format_count_response(issues, original_query)
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
            return self._format_grouped_analytics(issues, group_by, original_query)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}")
            # Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –æ—Ç–≤–µ—Ç—É
            return f"üìä **–ù–∞–π–¥–µ–Ω–æ:** {issues.total} –∑–∞–¥–∞—á(–∏)"

    def _format_count_response(self, issues, original_query: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç–∏–ø–∞ '—Å–∫–æ–ª—å–∫–æ'"""
        total = issues.total
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        context_words = []
        query_lower = original_query.lower()
        
        if "–±–∞–≥" in query_lower:
            context_words.append("–±–∞–≥–æ–≤")
        elif "–∑–∞–¥–∞—á" in query_lower:
            context_words.append("–∑–∞–¥–∞—á")
        
        if "–∑–∞–∫—Ä—ã—Ç" in query_lower:
            context_words.append("–∑–∞–∫—Ä—ã—Ç—ã—Ö")
        elif "–æ—Ç–∫—Ä—ã—Ç" in query_lower:
            context_words.append("–æ—Ç–∫—Ä—ã—Ç—ã—Ö")
            
        if "–∏—é–ª—å" in query_lower or "–∏—é–Ω" in query_lower:
            context_words.append("–≤ –∏—é–ª–µ")
        elif "–Ω–µ–¥–µ–ª—è" in query_lower:
            context_words.append("–∑–∞ –Ω–µ–¥–µ–ª—é")
        elif "—Å–µ–≥–æ–¥–Ω—è" in query_lower:
            context_words.append("—Å–µ–≥–æ–¥–Ω—è")
            
        context = " ".join(context_words) if context_words else "–∑–∞–¥–∞—á"
        
        response = f"üî¢ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {context}:** {total}\n\n"
        
        if total == 0:
            response += "–ó–∞–¥–∞—á–∏ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        elif total == 1:
            response += "–ù–∞–π–¥–µ–Ω–∞ 1 –∑–∞–¥–∞—á–∞ –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º."
        elif total <= 5:
            response += f"–ù–∞–π–¥–µ–Ω–æ {total} –∑–∞–¥–∞—á–∏. –í–æ—Ç –æ–Ω–∏:\n\n"
            
            for issue in issues.issues:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞—á—É
                issue_link = self._format_issue_link(issue.key)
                response += f"‚Ä¢ {issue_link} - {issue.summary}\n"
        else:
            response += f"üìà **–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞:**\n"
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –¥–ª—è –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏
            status_count = {}
            for issue in issues.issues:
                status = issue.status
                status_count[status] = status_count.get(status, 0) + 1
            
            for status, count in sorted(status_count.items(), key=lambda x: x[1], reverse=True):
                response += f"‚Ä¢ {status}: {count}\n"
                
        return response

    def _format_grouped_analytics(self, issues, group_by: str, original_query: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≥—Ä—É–ø–ø–æ–≤—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
        total = issues.total
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        grouped_data = {}
        for issue in issues.issues:
            if group_by == "assignee":
                key = getattr(issue, 'assignee', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω') or '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'
            elif group_by == "project":
                key = getattr(issue, 'project_key', issue.key.split('-')[0])
            elif group_by == "priority":
                key = getattr(issue, 'priority', '–ù–µ —É–∫–∞–∑–∞–Ω')
            elif group_by == "issue_type":
                key = getattr(issue, 'issue_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø')
            else:  # status –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                key = issue.status
                
            grouped_data[key] = grouped_data.get(key, 0) + 1
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        group_labels = {
            "assignee": "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º",
            "project": "–ø—Ä–æ–µ–∫—Ç–∞–º", 
            "priority": "–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º",
            "issue_type": "—Ç–∏–ø–∞–º –∑–∞–¥–∞—á",
            "status": "—Å—Ç–∞—Ç—É—Å–∞–º"
        }
        group_label = group_labels.get(group_by, "–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        
        response = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ {group_label}**\n"
        response += f"–í—Å–µ–≥–æ –∑–∞–¥–∞—á: {total}\n\n"
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        sorted_groups = sorted(grouped_data.items(), key=lambda x: x[1], reverse=True)
        
        for i, (name, count) in enumerate(sorted_groups, 1):
            percentage = (count / total * 100) if total > 0 else 0
            response += f"{i}. **{name}**: {count} ({percentage:.1f}%)\n"
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å–∞–π—Ç—ã –¥–ª—è —Ç–æ–ø-–≥—Ä—É–ø–ø
        if len(sorted_groups) > 0:
            top_group = sorted_groups[0]
            response += f"\nüí° **–ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∑–∞–¥–∞—á:** {top_group[0]} ({top_group[1]} –∑–∞–¥–∞—á)"
            
            if len(sorted_groups) > 1:
                response += f"\nüìà **–ê–∫—Ç–∏–≤–Ω—ã–µ {group_label}:** {len(sorted_groups)}"
                
        return response
    
    async def _format_worklog_response(self, issues, intent: Dict[str, Any], original_query: str, user_id: str) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç–∞–º (worklog)
        
        Args:
            issues: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏–∑ Jira
            intent: –ù–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            original_query: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —Å—É–º–º–æ–π —á–∞—Å–æ–≤
        """
        try:
            if issues.total == 0:
                return "üìã –ü–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ—ç—Ç–æ–º—É —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã —Ä–∞–≤–Ω—ã 0 —á–∞—Å–æ–≤."
            
            # –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ worklog
            async with cache_service as cache:
                credentials = await cache.get_cached_user_credentials(user_id)
                
            if not credentials:
                return "‚ùå –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç–∞—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Jira."
            
            # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã
            total_seconds = 0
            user_time = {}
            task_count = 0
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
            target_assignee = intent.get("parameters", {}).get("assignee")
            
            async with jira_service as jira:
                for issue in issues.issues:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º worklogs –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏
                        worklogs = await jira.get_worklogs(
                            issue.key,
                            credentials['username'],
                            token=credentials['password']
                        )
                        
                        for worklog in worklogs:
                            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–µ–º—É
                            if target_assignee:
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏
                                author_name = worklog.author.lower()
                                target_name = target_assignee.lower()
                                
                                # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏–º–µ–Ω–∏
                                if (target_name not in author_name and 
                                    author_name not in target_name and
                                    not any(part in author_name for part in target_name.split())):
                                    continue
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∫ –æ–±—â–µ–π —Å—É–º–º–µ
                            total_seconds += worklog.time_spent_seconds
                            
                            # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                            if worklog.author not in user_time:
                                user_time[worklog.author] = 0
                            user_time[worklog.author] += worklog.time_spent_seconds
                        
                        task_count += 1
                        
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è worklogs –¥–ª—è {issue.key}: {e}")
                        continue
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–µ–∫—É–Ω–¥—ã –≤ —á–∞—Å—ã
            total_hours = total_seconds / 3600
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
            assignee_param = intent.get("parameters", {}).get("assignee")
            time_period = intent.get("parameters", {}).get("time_period", "")
            project_param = intent.get("parameters", {}).get("project", "")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç
            if total_hours == 0:
                if assignee_param:
                    response = f"‚è±Ô∏è **{assignee_param}** –Ω–µ —Å–ø–∏—Å—ã–≤–∞–ª –≤—Ä–µ–º—è"
                else:
                    response = f"‚è±Ô∏è **–í—Ä–µ–º—è –Ω–µ —Å–ø–∏—Å—ã–≤–∞–ª–æ—Å—å**"
            else:
                if assignee_param:
                    response = f"‚è±Ô∏è **{assignee_param}** —Å–ø–∏—Å–∞–ª **{total_hours:.1f} —á–∞—Å–æ–≤**"
                else:
                    response = f"‚è±Ô∏è **–û–±—â–∏–µ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã: {total_hours:.1f} —á–∞—Å–æ–≤**"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context_parts = []
            if time_period:
                context_parts.append(f"–∑–∞ {time_period}")
            if project_param:
                context_parts.append(f"–ø–æ –ø—Ä–æ–µ–∫—Ç—É {project_param}")
            elif issues.total > 0:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
                projects = set()
                for issue in issues.issues[:5]:  # –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤
                    project_key = issue.key.split('-')[0]
                    projects.add(project_key)
                if len(projects) == 1:
                    context_parts.append(f"–ø–æ –ø—Ä–æ–µ–∫—Ç—É {list(projects)[0]}")
                elif len(projects) > 1:
                    context_parts.append(f"–ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º {', '.join(sorted(projects))}")
            
            if context_parts:
                response += f" {' '.join(context_parts)}"
            
            response += f"\n\nüìä **–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:**\n"
            response += f"‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–¥–∞—á: {task_count}\n"
            
            if len(user_time) > 1 and not assignee_param:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                sorted_users = sorted(user_time.items(), key=lambda x: x[1], reverse=True)[:3]
                response += f"‚Ä¢ –¢–æ–ø –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:\n"
                for i, (user, seconds) in enumerate(sorted_users, 1):
                    hours = seconds / 3600
                    response += f"  {i}. {user}: {hours:.1f} —á\n"
            
            return response
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è worklog –æ—Ç–≤–µ—Ç–∞: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç: {str(e)}"


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
message_processor = MessageProcessor()