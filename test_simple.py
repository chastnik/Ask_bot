#!/usr/bin/env python3
"""–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""

import asyncio
import sys

async def simple_test():
    print("üß™ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Ask Bot")
    print("=" * 30)
    
    try:
        from app.services.message_processor import MessageProcessor
        print("‚úÖ MessageProcessor –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        processor = MessageProcessor()
        print("‚úÖ MessageProcessor —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏
        response = await processor.process_message("test_user", "–ø–æ–º–æ—â—å")
        print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        print(f"üìù –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        if "Ask Bot" in response:
            print("‚úÖ –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç 'Ask Bot'")
            return True
        else:
            print("‚ùå –û—Ç–≤–µ—Ç –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç 'Ask Bot'")
            print(f"–û—Ç–≤–µ—Ç: {response[:200]}...")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    try:
        result = asyncio.run(simple_test())
        print()
        if result:
            print("üéâ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ü–†–û–®–ï–õ")
            sys.exit(0)
        else:
            print("‚ùå –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ü–†–û–í–ê–õ–ò–õ–°–Ø")
            sys.exit(1)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
