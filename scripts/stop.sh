#!/bin/bash

# Ask Bot - —Å–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è Unix —Å–∏—Å—Ç–µ–º (Linux/macOS)
# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã Ask Bot

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_header() {
    echo -e "${BLUE}"
    echo "üõë ==============================================="
    echo "   Ask Bot - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    echo "===============================================${NC}"
    echo
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ Ask Bot
stop_ask_bot() {
    print_info "–ü–æ–∏—Å–∫ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ Ask Bot..."
    
    # –ò—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã uvicorn —Å –Ω–∞—à–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
    RUNNING_PIDS=$(ps aux | grep -E "uvicorn.*app\.main:app" | grep -v grep | awk '{print $2}')
    
    if [ -z "$RUNNING_PIDS" ]; then
        print_info "–ó–∞–ø—É—â–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã Ask Bot –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    else
        print_warning "–ù–∞–π–¥–µ–Ω—ã –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã Ask Bot:"
        ps aux | grep -E "uvicorn.*app\.main:app" | grep -v grep | while read line; do
            echo "   $line"
        done
        echo
        
        echo -n "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã? (Y/n): "
        read -r confirm_stop
        
        if [[ ! $confirm_stop =~ ^[Nn]$ ]]; then
            print_info "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã Ask Bot..."
            
            for pid in $RUNNING_PIDS; do
                print_info "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º SIGTERM –ø—Ä–æ—Ü–µ—Å—Å—É $pid..."
                kill -TERM $pid 2>/dev/null || true
            done
            
            # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            print_info "–û–∂–∏–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (5 —Å–µ–∫)..."
            sleep 5
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –µ—â–µ —Ä–∞–±–æ—Ç–∞—é—Ç
            STILL_RUNNING=$(ps aux | grep -E "uvicorn.*app\.main:app" | grep -v grep | awk '{print $2}')
            
            if [ ! -z "$STILL_RUNNING" ]; then
                print_warning "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º..."
                for pid in $STILL_RUNNING; do
                    print_info "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º SIGKILL –ø—Ä–æ—Ü–µ—Å—Å—É $pid..."
                    kill -KILL $pid 2>/dev/null || true
                done
                sleep 1
            fi
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            FINAL_CHECK=$(ps aux | grep -E "uvicorn.*app\.main:app" | grep -v grep | awk '{print $2}')
            if [ -z "$FINAL_CHECK" ]; then
                print_success "–í—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã Ask Bot —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
            else
                print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã: $FINAL_CHECK"
                exit 1
            fi
        else
            print_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
        fi
    fi
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–∞ –ø–æ—Ä—Ç—É 8000
stop_port_8000() {
    print_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–Ω—è—Ç–æ—Å—Ç—å –ø–æ—Ä—Ç–∞ 8000..."
    
    if command -v lsof &> /dev/null; then
        PORT_PROCESSES=$(lsof -ti :8000 2>/dev/null || true)
        
        if [ ! -z "$PORT_PROCESSES" ]; then
            print_warning "–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É 8000:"
            lsof -i :8000 2>/dev/null || true
            echo
            
            echo -n "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É 8000? (Y/n): "
            read -r confirm_port
            
            if [[ ! $confirm_port =~ ^[Nn]$ ]]; then
                print_info "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É 8000..."
                
                for pid in $PORT_PROCESSES; do
                    print_info "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å $pid..."
                    kill -TERM $pid 2>/dev/null || true
                    sleep 2
                    
                    if kill -0 $pid 2>/dev/null; then
                        print_warning "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å $pid..."
                        kill -KILL $pid 2>/dev/null || true
                    fi
                done
                
                print_success "–ü—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É 8000 –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
            fi
        else
            print_success "–ü–æ—Ä—Ç 8000 —Å–≤–æ–±–æ–¥–µ–Ω"
        fi
    else
        print_warning "–ö–æ–º–∞–Ω–¥–∞ lsof –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'netstat -ln | grep :8000' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞"
    fi
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
stop_docker() {
    if command -v docker-compose &> /dev/null && [ -f "docker-compose.yml" ]; then
        echo -n "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã Ask Bot? (y/N): "
        read -r stop_docker_containers
        
        if [[ $stop_docker_containers =~ ^[Yy]$ ]]; then
            print_info "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
            docker-compose down
            print_success "Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        fi
    fi
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
show_status() {
    print_info "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å Ask Bot:"
    echo
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
    ASK_BOT_PROCESSES=$(ps aux | grep -E "uvicorn.*app\.main:app" | grep -v grep || true)
    if [ -z "$ASK_BOT_PROCESSES" ]; then
        print_success "Ask Bot –ø—Ä–æ—Ü–µ—Å—Å—ã: –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã"
    else
        print_warning "Ask Bot –ø—Ä–æ—Ü–µ—Å—Å—ã: –Ω–∞–π–¥–µ–Ω—ã –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã"
        echo "$ASK_BOT_PROCESSES"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç
    if command -v lsof &> /dev/null; then
        PORT_STATUS=$(lsof -i :8000 2>/dev/null || true)
        if [ -z "$PORT_STATUS" ]; then
            print_success "–ü–æ—Ä—Ç 8000: —Å–≤–æ–±–æ–¥–µ–Ω"
        else
            print_warning "–ü–æ—Ä—Ç 8000: –∑–∞–Ω—è—Ç"
            echo "$PORT_STATUS"
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
    if command -v docker-compose &> /dev/null && [ -f "docker-compose.yml" ]; then
        DOCKER_STATUS=$(docker-compose ps 2>/dev/null || true)
        if echo "$DOCKER_STATUS" | grep -q "Up"; then
            print_warning "Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: –∑–∞–ø—É—â–µ–Ω—ã"
            echo "$DOCKER_STATUS"
        else
            print_success "Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
        fi
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    print_header
    
    case "${1:-stop}" in
        "stop")
            stop_ask_bot
            stop_port_8000
            stop_docker
            echo
            print_success "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
            ;;
        "status")
            show_status
            ;;
        "port")
            stop_port_8000
            ;;
        "docker")
            stop_docker
            ;;
        "help"|"-h"|"--help")
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–∫–æ–º–∞–Ω–¥–∞]"
            echo
            echo "–ö–æ–º–∞–Ω–¥—ã:"
            echo "  stop    - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã Ask Bot (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
            echo "  status  - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
            echo "  port    - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É 8000"
            echo "  docker  - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
            echo "  help    - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
            ;;
        *)
            print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $1"
            print_info "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '$0 help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
            exit 1
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫
main "$@" 