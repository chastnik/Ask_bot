"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Ask Bot
"""
import time
from datetime import datetime
from typing import Dict, Any, Optional
from loguru import logger

from app.services.jira_service import jira_service, JiraAPIError, JiraAuthError
from app.services.llm_service import llm_service
from app.services.cache_service import cache_service


class DirectMessageHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Mattermost"""
    
    def __init__(self):
        self.commands = {
            '–ø–æ–º–æ—â—å': self._handle_help,
            'help': self._handle_help,
            '–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è': self._handle_auth,
            '—Å—Ç–∞—Ç—É—Å': self._handle_status,
            '–ø—Ä–æ–µ–∫—Ç—ã': self._handle_projects,
            '–∫–µ—à': self._handle_cache,
        }
    
    async def process_message(self, user_query: str, user_id: str, user_name: str, channel_id: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            query_lower = user_query.strip().lower()
            
            for command_key, handler in self.commands.items():
                if query_lower.startswith(command_key):
                    return await handler(user_query, user_id, user_name, channel_id)
            
            return await self._handle_jira_query(user_query, user_id, user_name, channel_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return {"text": f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"}
    
    async def _handle_help(self, user_query: str, user_id: str, user_name: str, channel_id: str) -> Dict[str, Any]:
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
        return {"text": "ü§ñ **Ask Bot**\n\n–ö–æ–º–∞–Ω–¥—ã:\n‚Ä¢ –ø–æ–º–æ—â—å\n‚Ä¢ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è username password\n‚Ä¢ —Å—Ç–∞—Ç—É—Å\n‚Ä¢ –ø—Ä–æ–µ–∫—Ç—ã"}
    
    async def _handle_auth(self, user_query: str, user_id: str, user_name: str, channel_id: str) -> Dict[str, Any]:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"""
        parts = user_query.strip().split()
        if len(parts) >= 3:
            username, credential = parts[1], parts[2]
            try:
                async with cache_service as cache:
                    await cache.set(f"user:{user_id}:credentials", {
                        "username": username, 
                        "password": credential
                    }, ttl=86400)
                return {"text": f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è {username}"}
            except Exception as e:
                return {"text": f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"}
        return {"text": "–§–æ—Ä–º–∞—Ç: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è username password"}
    
    async def _handle_status(self, user_query: str, user_id: str, user_name: str, channel_id: str) -> Dict[str, Any]:
        """–°—Ç–∞—Ç—É—Å"""
        try:
            async with cache_service as cache:
                creds = await cache.get(f"user:{user_id}:credentials")
                if creds:
                    return {"text": f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ {creds['username']}"}
                return {"text": "‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"}
        except:
            return {"text": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞"}
    
    async def _handle_projects(self, user_query: str, user_id: str, user_name: str, channel_id: str) -> Dict[str, Any]:
        """–ü—Ä–æ–µ–∫—Ç—ã"""
        return {"text": "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"}
    
    async def _handle_cache(self, user_query: str, user_id: str, user_name: str, channel_id: str) -> Dict[str, Any]:
        """–ö–µ—à"""
        if "–æ—á–∏—Å—Ç–∏—Ç—å" in user_query.lower():
            return {"text": "üßπ –ö–µ—à –æ—á–∏—â–µ–Ω"}
        return {"text": "–ö–æ–º–∞–Ω–¥—ã: –∫–µ—à –æ—á–∏—Å—Ç–∏—Ç—å"}
    
    async def _handle_jira_query(self, user_query: str, user_id: str, user_name: str, channel_id: str) -> Dict[str, Any]:
        """Jira –∑–∞–ø—Ä–æ—Å"""
        try:
            async with cache_service as cache:
                creds = await cache.get(f"user:{user_id}:credentials")
                if not creds:
                    return {"text": "‚ùå –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π '–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'"}
            
            async with llm_service as llm:
                jql = await llm.generate_jql_query(user_query, {"users": [creds["username"]]})
                if not jql:
                    return {"text": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å JQL"}
            
            async with jira_service as jira:
                result = await jira.search_issues(
                    jql=jql,
                    username=creds["username"],
                    password=creds["password"],
                    max_results=10
                )
                
                async with llm_service as llm:
                    response = await llm.generate_response_text({
                        "issues": [i.dict() for i in result.issues],
                        "total": result.total,
                        "jql": jql
                    }, user_query)
                
                return {"text": response}
                
        except Exception as e:
            return {"text": f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
dm_handler = DirectMessageHandler()
