"""
–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Ask Bot
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
"""
import re
from typing import Dict, Any, Optional
from loguru import logger

from app.services.jira_service import jira_service, JiraAPIError, JiraAuthError
from app.services.llm_service import llm_service
from app.services.cache_service import cache_service
from app.services.mattermost_service import mattermost_service
from app.services.chart_service import chart_service


class MessageProcessor:
    """–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Ask Bot"""
    
    def __init__(self):
        self.commands = {
            '–ø–æ–º–æ—â—å': self._handle_help,
            'help': self._handle_help,
            '–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è': self._handle_auth,
            'auth': self._handle_auth,
            '—Å—Ç–∞—Ç—É—Å': self._handle_status,
            'status': self._handle_status,
            '–ø—Ä–æ–µ–∫—Ç—ã': self._handle_projects,
            'projects': self._handle_projects,
            '–∫–µ—à': self._handle_cache,
            'cache': self._handle_cache,
            '–Ω–∞—É—á–∏': self._handle_teach,
            'teach': self._handle_teach,
            '–º–∞–ø–ø–∏–Ω–≥–∏': self._handle_mappings,
            'mappings': self._handle_mappings,
            '–æ–±–Ω–æ–≤–∏—Ç—å': self._handle_refresh_dictionaries,
            'refresh': self._handle_refresh_dictionaries,
        }
    
    async def process_message(self, user_id: str, message: str) -> str:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            –û—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            message = message.strip()
            
            if not message:
                return ""
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
            command_result = await self._try_handle_command(user_id, message)
            if command_result:
                return command_result
            
            # –ï—Å–ª–∏ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –∫ Jira
            return await self._handle_jira_query(user_id, message)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_id}: {e}")
            return f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
    
    async def _try_handle_command(self, user_id: str, message: str) -> Optional[str]:
        """–ü—ã—Ç–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –∫–æ–º–∞–Ω–¥—É"""
        words = message.lower().split()
        
        if not words:
            return None
        
        first_word = words[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
        if first_word in self.commands:
            return await self.commands[first_word](user_id, message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª–æ–≤
        if len(words) >= 2:
            two_words = f"{words[0]} {words[1]}"
            if two_words in self.commands:
                return await self.commands[two_words](user_id, message)
        
        return None
    
    async def _handle_help(self, user_id: str, message: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏"""
        return """
ü§ñ **Ask Bot - –í–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ Jira**

**üí¨ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ!

**üìù –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ "–ü–æ–∫–∞–∂–∏ –º–æ–∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏"
‚Ä¢ "–°–∫–æ–ª—å–∫–æ –±–∞–≥–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ PROJECT_KEY?"
‚Ä¢ "–ó–∞–¥–∞—á–∏ –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –ø—Ä–æ–µ–∫—Ç–µ ABC"
‚Ä¢ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü"
‚Ä¢ "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ XYZ"

**‚öôÔ∏è –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `–ø–æ–º–æ—â—å` - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ `–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è [–ª–æ–≥–∏–Ω] [–ø–∞—Ä–æ–ª—å/—Ç–æ–∫–µ–Ω]` - –≤–æ–π—Ç–∏ –≤ Jira
‚Ä¢ `—Å—Ç–∞—Ç—É—Å` - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
‚Ä¢ `–ø—Ä–æ–µ–∫—Ç—ã` - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
‚Ä¢ `–∫–µ—à –æ—á–∏—Å—Ç–∏—Ç—å` - –æ—á–∏—Å—Ç–∏—Ç—å –∫–µ—à
‚Ä¢ `–∫–µ—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞

**üéì –û–±—É—á–µ–Ω–∏–µ –±–æ—Ç–∞:**
‚Ä¢ `–Ω–∞—É—á–∏ –∫–ª–∏–µ–Ω—Ç "–ù–∞–∑–≤–∞–Ω–∏–µ" –ø—Ä–æ–µ–∫—Ç "–ö–õ–Æ–ß"` - –Ω–∞—É—á–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—é –∫–ª–∏–µ–Ω—Ç‚Üí–ø—Ä–æ–µ–∫—Ç
‚Ä¢ `–Ω–∞—É—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–ò–º—è" username "login"` - –Ω–∞—É—á–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—é –∏–º—è‚Üíusername
‚Ä¢ `–º–∞–ø–ø–∏–Ω–≥–∏` - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
‚Ä¢ `–æ–±–Ω–æ–≤–∏—Ç—å` - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ Jira

**üìä –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤:**
–î–æ–±–∞–≤—å—Ç–µ "–ø–æ–∫–∞–∂–∏ –∫–∞–∫ –≥—Ä–∞—Ñ–∏–∫" –∫ –ª—é–±–æ–º—É –∑–∞–ø—Ä–æ—Å—É –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏!

–ü—Ä–∏–º–µ—Ä: "–ó–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –≤ –ø—Ä–æ–µ–∫—Ç–µ ABC –ø–æ–∫–∞–∂–∏ –∫–∞–∫ –≥—Ä–∞—Ñ–∏–∫"
"""
    
    async def _handle_auth(self, user_id: str, message: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        parts = message.strip().split()
        
        if len(parts) < 3:
            return """
üîê **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Jira**

**–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:**
`–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è [–ª–æ–≥–∏–Ω] [–ø–∞—Ä–æ–ª—å/—Ç–æ–∫–µ–Ω]`

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ `–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è user@company.com mypassword`
‚Ä¢ `–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è username api_token_here`

**–î–ª—è Jira Cloud —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API —Ç–æ–∫–µ–Ω –≤–º–µ—Å—Ç–æ –ø–∞—Ä–æ–ª—è.**
"""
        
        username = parts[1]
        password = parts[2]
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Jira (—Ç–æ–∫–µ–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å)
            async with jira_service as jira:
                # –ü—ã—Ç–∞–µ–º—Å—è —Å–Ω–∞—á–∞–ª–∞ –∫–∞–∫ —Ç–æ–∫–µ–Ω, –ø–æ—Ç–æ–º –∫–∞–∫ –ø–∞—Ä–æ–ª—å
                test_result = await jira.test_connection(username, token=password)
                if not test_result:
                    test_result = await jira.test_connection(username, password=password)

            if test_result:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à–µ
                async with cache_service as cache:
                    credentials = {"username": username, "password": password}
                    await cache.cache_user_credentials(user_id, credentials)
                
                return f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Jira –∫–∞–∫ **{username}**"
            else:
                return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Jira. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å/—Ç–æ–∫–µ–Ω."
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}"
    
    async def _handle_status(self, user_id: str, message: str) -> str:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        try:
            async with cache_service as cache:
                credentials = await cache.get_cached_user_credentials(user_id)
                
            if credentials:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ –µ—â–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã
                async with jira_service as jira:
                    # –ü—ã—Ç–∞–µ–º—Å—è —Å–Ω–∞—á–∞–ª–∞ –∫–∞–∫ —Ç–æ–∫–µ–Ω, –ø–æ—Ç–æ–º –∫–∞–∫ –ø–∞—Ä–æ–ª—å
                    test_result = await jira.test_connection(
                        credentials['username'],
                        token=credentials['password']
                    )
                    if not test_result:
                        test_result = await jira.test_connection(
                            credentials['username'],
                            password=credentials['password']
                        )
                
                if test_result:
                    return f"‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Jira –∫–∞–∫ **{credentials['username']}**"
                else:
                    # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    async with cache_service as cache:
                        await cache.invalidate_user_cache(user_id)
                    return "‚ùå –í–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é."
            else:
                return """
‚ùå **–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Jira**

–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
`–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è [–ª–æ–≥–∏–Ω] [–ø–∞—Ä–æ–ª—å/—Ç–æ–∫–µ–Ω]`
"""
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"
    
    async def _handle_projects(self, user_id: str, message: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        try:
            async with cache_service as cache:
                credentials = await cache.get_cached_user_credentials(user_id)
                
            if not credentials:
                return "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Jira. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è [–ª–æ–≥–∏–Ω] [–ø–∞—Ä–æ–ª—å]`"
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
            async with jira_service as jira:
                projects = await jira.get_projects(
                    credentials['username'],
                    credentials['password']
                )
            
            if projects:
                projects_text = "üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã Jira:**\n\n"
                for project in projects[:20]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
                    projects_text += f"‚Ä¢ **{project.get('key')}** - {project.get('name')}\n"
                
                if len(projects) > 20:
                    projects_text += f"\n... –∏ –µ—â–µ {len(projects) - 20} –ø—Ä–æ–µ–∫—Ç–æ–≤"
                    
                return projects_text
            else:
                return "üìã –ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∏–º."
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤: {str(e)}"
    
    async def _handle_cache(self, user_id: str, message: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∫–µ—à–∞"""
        if '–æ—á–∏—Å—Ç–∏—Ç—å' in message or 'clear' in message:
            try:
                async with cache_service as cache:
                    await cache.invalidate_user_cache(user_id)
                return "‚úÖ –í–∞—à –∫–µ—à –æ—á–∏—â–µ–Ω"
            except Exception as e:
                return f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞: {str(e)}"
                
        elif '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫' in message or 'stats' in message:
            try:
                async with cache_service as cache:
                    stats = await cache.get_cache_stats()
                
                stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞:**

‚Ä¢ **–í—Å–µ–≥–æ –∫–ª—é—á–µ–π:** {stats.get('total_keys', 0)}
‚Ä¢ **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:** {stats.get('memory_usage', 'N/A')}
‚Ä¢ **Hit Rate:** {stats.get('hit_rate', 0)}%

**–¢–∏–ø—ã –∫–ª—é—á–µ–π:**
"""
                for key_type, count in stats.get('key_types', {}).items():
                    stats_text += f"‚Ä¢ {key_type}: {count}\n"
                    
                return stats_text
                
            except Exception as e:
                return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
        else:
            return """
**–ö–æ–º–∞–Ω–¥—ã –∫–µ—à–∞:**
‚Ä¢ `–∫–µ—à –æ—á–∏—Å—Ç–∏—Ç—å` - –æ—á–∏—Å—Ç–∏—Ç—å –≤–∞—à –∫–µ—à
‚Ä¢ `–∫–µ—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞` - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞
"""
    
    async def _handle_jira_query(self, user_id: str, query: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Jira"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–µ—à–∞
            async with cache_service as cache:
                credentials = await cache.get_cached_user_credentials(user_id)
                
            if not credentials:
                return """
‚ùå **–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Jira**

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
`–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è [–ª–æ–≥–∏–Ω] [–ø–∞—Ä–æ–ª—å/—Ç–æ–∫–µ–Ω]`

–ü—Ä–∏–º–µ—Ä: `–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è user@company.com mytoken`
"""

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é LLM
            try:
                async with llm_service as llm:
                    intent = await llm.interpret_query_intent(query)
                logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω intent: {intent}")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ intent: {e}")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –∫–∞–∫ fallback
                async with llm_service as llm:
                    intent = llm._simple_intent_analysis(query)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–ø–ø–∏–Ω–≥–∏ –∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ Jira –∏–∑ –∫–µ—à–∞
            try:
                async with cache_service as cache:
                    client_mappings = await cache.get_all_client_mappings()
                    user_mappings = await cache.get_all_user_mappings()
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ Jira
                    jira_dictionaries = await cache.get_all_jira_dictionaries(user_id)
                    
                    # –ï—Å–ª–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –ø—É—Å—Ç—ã–µ - –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Ö
                    if not any(jira_dictionaries.values()):
                        logger.info(f"–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ Jira –ø—É—Å—Ç—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –æ–±–Ω–æ–≤–ª—è–µ–º...")
                        refresh_success = await self._refresh_jira_dictionaries(user_id)
                        if refresh_success:
                            jira_dictionaries = await cache.get_all_jira_dictionaries(user_id)
                
                # –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏
                logger.info(f"Client mappings type: {type(client_mappings)}, value: {client_mappings}")
                logger.info(f"User mappings type: {type(user_mappings)}, value: {user_mappings}")
                logger.info(f"Jira dictionaries loaded: {', '.join([f'{k}({len(v)})' for k, v in jira_dictionaries.items()])}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if not isinstance(client_mappings, dict):
                    logger.warning(f"client_mappings –Ω–µ —Å–ª–æ–≤–∞—Ä—å: {type(client_mappings)}, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å")
                    client_mappings = {}
                if not isinstance(user_mappings, dict):
                    logger.warning(f"user_mappings –Ω–µ —Å–ª–æ–≤–∞—Ä—å: {type(user_mappings)}, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å")
                    user_mappings = {}
                    
                user_context = {
                    "projects": jira_dictionaries.get("projects", []), 
                    "clients": list(client_mappings.keys()),
                    "users": list(user_mappings.keys()),
                    "client_mappings": client_mappings,
                    "user_mappings": user_mappings,
                    "jira_dictionaries": jira_dictionaries
                }
                
                async with llm_service as llm:
                    jql = await llm.generate_jql_query(query, user_context)
                logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω JQL: {jql}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —É—Ç–æ—á–Ω–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥
                if jql and jql.startswith("UNKNOWN_CLIENT:"):
                    client_name = jql.replace("UNKNOWN_CLIENT:", "")
                    return await self._ask_for_client_mapping(user_id, client_name)
                elif jql and jql.startswith("UNKNOWN_USER:"):
                    user_name = jql.replace("UNKNOWN_USER:", "")
                    return await self._resolve_user_mapping(user_id, user_name, query)
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ JQL: {e}")
                return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å: {str(e)}"
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Jira
            try:
                async with jira_service as jira:
                    issues = await jira.search_issues(
                        jql,
                        credentials['username'],
                        credentials['password'],
                        max_results=50
                    )
                
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {issues.total if issues else 0}")

            except JiraAuthError:
                # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                async with cache_service as cache:
                    await cache.invalidate_user_cache(user_id)
                return "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Jira. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é."
            except JiraAPIError as e:
                return f"‚ùå –û—à–∏–±–∫–∞ Jira API: {str(e)}"

            if not issues or not issues.issues:
                return "üìã –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω
            chart_url = None
            if intent.get("needs_chart", False):
                try:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –≤ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∏ —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    status_count = {}
                    for issue in issues.issues:
                        status = issue.status
                        status_count[status] = status_count.get(status, 0) + 1
                    
                    chart_data = []
                    for status, count in status_count.items():
                        chart_data.append({
                            'name': status,
                            'value': count,
                            'category': status
                        })
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞
                    chart_type = intent.get("parameters", {}).get("chart_type", "bar")
                    
                    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                    if chart_type == "pie":
                        chart_url = await chart_service.create_pie_chart(chart_data, "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º")
                    elif chart_type == "line":
                        chart_url = await chart_service.create_line_chart(chart_data, "–î–∏–Ω–∞–º–∏–∫–∞ –∑–∞–¥–∞—á", "name", "value")
                    else:  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ç–æ–ª–±—á–∞—Ç—ã–π –≥—Ä–∞—Ñ–∏–∫
                        chart_url = await chart_service.create_bar_chart(chart_data, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º", "name", "value")
                    logger.info(f"–°–æ–∑–¥–∞–Ω –≥—Ä–∞—Ñ–∏–∫: {chart_url}")
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –≥—Ä–∞—Ñ–∏–∫–∞

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            response_text = f"üìã **–ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á:** {issues.total}\n\n"

            for issue in issues.issues[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 10 –∑–∞–¥–∞—á
                response_text += f"‚Ä¢ **{issue.key}** - {issue.summary}\n"
                response_text += f"  –°—Ç–∞—Ç—É—Å: {issue.status}\n\n"

            if issues.total > 10:
                response_text += f"... –∏ –µ—â–µ {issues.total - 10} –∑–∞–¥–∞—á(–∏)"

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä–∞—Ñ–∏–∫ –µ—Å–ª–∏ –æ–Ω —Å–æ–∑–¥–∞–Ω
            if chart_url:
                response_text += f"\n\nüìä **–ì—Ä–∞—Ñ–∏–∫:** [–û—Ç–∫—Ä—ã—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é]({chart_url})"

            return response_text
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç {user_id}: {e}")
            return f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"

    async def _refresh_jira_dictionaries(self, user_id: str) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ Jira –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            True –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with cache_service as cache:
                credentials = await cache.get_cached_user_credentials(user_id)
                
            if not credentials:
                logger.warning(f"–ù–µ—Ç —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –Ω–µ –º–æ–∂–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –∏–∑ Jira
            async with jira_service as jira:
                dictionaries = await jira.get_all_dictionaries(
                    credentials['username'],
                    credentials['password']
                )
            
            # –ö—ç—à–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫
            async with cache_service as cache:
                for dict_type, data in dictionaries.items():
                    await cache.cache_jira_dictionary(dict_type, data, user_id)
            
            logger.info(f"–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ Jira –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {', '.join([f'{k}({len(v)})' for k, v in dictionaries.items()])}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    async def _ask_for_client_mapping(self, user_id: str, client_name: str) -> str:
        """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–∞–ø–ø–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç"""
        return f"""
ü§î **–Ø –Ω–µ –∑–Ω–∞—é, –∫–∞–∫–æ–π –ø—Ä–æ–µ–∫—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–ª–∏–µ–Ω—Ç—É "{client_name}"**

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—É—á–∏—Ç–µ –º–µ–Ω—è! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
`–Ω–∞—É—á–∏ –∫–ª–∏–µ–Ω—Ç "{client_name}" –ø—Ä–æ–µ–∫—Ç "–ö–õ–Æ–ß_–ü–†–û–ï–ö–¢–ê"`

**–ü—Ä–∏–º–µ—Ä:**
`–Ω–∞—É—á–∏ –∫–ª–∏–µ–Ω—Ç "–ò–ª—å –¥–µ –ë–æ—Ç—ç" –ø—Ä–æ–µ–∫—Ç "IDB"`

–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —è —Å–º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å.
"""

    async def _resolve_user_mapping(self, user_id: str, display_name: str, original_query: str) -> str:
        """–ò—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Jira –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –º–∞–ø–ø–∏–Ω–≥ –∏–ª–∏ –æ–±—É—á–µ–Ω–∏–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            async with cache_service as cache:
                credentials = await cache.get_cached_user_credentials(user_id)
            
            if not credentials:
                return "‚ùå –î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Jira."
            
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Jira
            async with jira_service as jira:
                found_user = await jira.find_user_by_display_name(
                    display_name, 
                    credentials['username'], 
                    token=credentials['password']
                )
            
            if found_user:
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥
                jira_username = found_user.get('name', '')
                jira_display_name = found_user.get('displayName', display_name)
                
                async with cache_service as cache:
                    await cache.save_user_username_mapping(
                        jira_display_name, jira_username, user_id
                    )
                
                logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω –º–∞–ø–ø–∏–Ω–≥: {jira_display_name} ‚Üí {jira_username}")
                
                # –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                return f"""‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: **{jira_display_name}** ‚Üí `{jira_username}`

–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...

""" + await self._handle_jira_query(user_id, original_query)
            
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ—Å–∏–º –Ω–∞—É—á–∏—Ç—å
                return f"""
ü§î **–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "{display_name}" –≤ Jira**

–í–æ–∑–º–æ–∂–Ω–æ, –∏–º—è –Ω–∞–ø–∏—Å–∞–Ω–æ –Ω–µ —Ç–æ—á–Ω–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–æ–µ –∏–º—è.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—É—á–∏—Ç–µ –º–µ–Ω—è:
`–Ω–∞—É—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "{display_name}" username "jira_username"`

**–ü—Ä–∏–º–µ—Ä:**
`–Ω–∞—É—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–û–ª–µ–≥ –ê–Ω—Ç–æ–Ω–æ–≤" username "olegantov"`

–ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å —Ç–æ—á–Ω–æ–µ –∏–º—è –≤ Jira –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ.
"""
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {display_name}: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}"

    async def _handle_teach(self, user_id: str, message: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ–±—É—á–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞–º"""
        try:
            # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É –æ–±—É—á–µ–Ω–∏—è
            parts = message.strip().split()
            
            if len(parts) < 5:
                return """
üéì **–ö–æ–º–∞–Ω–¥—ã –æ–±—É—á–µ–Ω–∏—è:**

**–ö–ª–∏–µ–Ω—Ç ‚Üí –ü—Ä–æ–µ–∫—Ç:**
`–Ω–∞—É—á–∏ –∫–ª–∏–µ–Ω—Ç "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞" –ø—Ä–æ–µ–∫—Ç "–ö–õ–Æ–ß_–ü–†–û–ï–ö–¢–ê"`

**–ò–º—è ‚Üí Username:**
`–Ω–∞—É—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–ò–º—è –§–∞–º–∏–ª–∏—è" username "jira_username"`

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ `–Ω–∞—É—á–∏ –∫–ª–∏–µ–Ω—Ç "–ò–ª—å –¥–µ –ë–æ—Ç—ç" –ø—Ä–æ–µ–∫—Ç "IDB"`
‚Ä¢ `–Ω–∞—É—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–°—Ç–∞–Ω–∏—Å–ª–∞–≤ –ß–∞—à–∏–Ω" username "svchashin"`
"""

            mapping_type = parts[1].lower()
            
            if mapping_type == "–∫–ª–∏–µ–Ω—Ç" and len(parts) >= 5:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∫–ª—é—á –ø—Ä–æ–µ–∫—Ç–∞
                import re
                # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ —Å –∫–∞–≤—ã—á–∫–∞–º–∏, —Ç–∞–∫ –∏ –±–µ–∑ –Ω–∏—Ö
                client_match = re.search(r'–∫–ª–∏–µ–Ω—Ç\s+(?:"([^"]+)"|(\S+))', message, re.IGNORECASE)
                project_match = re.search(r'–ø—Ä–æ–µ–∫—Ç\s+(?:"([^"]+)"|(\S+))', message, re.IGNORECASE)
                
                if client_match and project_match:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –≥—Ä—É–ø–ø—É (—Å –∫–∞–≤—ã—á–∫–∞–º–∏ –∏–ª–∏ –±–µ–∑)
                    client_name = client_match.group(1) or client_match.group(2)
                    project_key = project_match.group(1) or project_match.group(2)
                    
                    async with cache_service as cache:
                        success = await cache.save_client_project_mapping(
                            client_name, project_key, user_id
                        )
                    
                    if success:
                        return f'‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –∑–Ω–∞—é, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç **"{client_name}"** —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ–µ–∫—Ç—É **"{project_key}"**'
                    else:
                        return "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞"
                        
            elif mapping_type == "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" and len(parts) >= 5:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏ username
                import re
                # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ —Å –∫–∞–≤—ã—á–∫–∞–º–∏, —Ç–∞–∫ –∏ –±–µ–∑ –Ω–∏—Ö
                name_match = re.search(r'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\s+(?:"([^"]+)"|(\S+(?:\s+\S+)*))', message, re.IGNORECASE)
                username_match = re.search(r'username\s+(?:"([^"]+)"|(\S+))', message, re.IGNORECASE)
                
                if name_match and username_match:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é –≥—Ä—É–ø–ø—É (—Å –∫–∞–≤—ã—á–∫–∞–º–∏ –∏–ª–∏ –±–µ–∑)
                    display_name = name_match.group(1) or name_match.group(2)
                    username = username_match.group(1) or username_match.group(2)
                    
                    async with cache_service as cache:
                        success = await cache.save_user_username_mapping(
                            display_name, username, user_id
                        )
                    
                    if success:
                        return f'‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –∑–Ω–∞—é, —á—Ç–æ **"{display_name}"** —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç username **"{username}"**'
                    else:
                        return "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞"
            
            return "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `–Ω–∞—É—á–∏` –¥–ª—è –ø–æ–º–æ—â–∏."
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {str(e)}"

    async def _handle_mappings(self, user_id: str, message: str) -> str:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏"""
        try:
            async with cache_service as cache:
                client_mappings = await cache.get_all_client_mappings()
                user_mappings = await cache.get_all_user_mappings()
            
            response = "üìã **–ò–∑–≤–µ—Å—Ç–Ω—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏:**\n\n"
            
            if client_mappings:
                response += "**–ö–ª–∏–µ–Ω—Ç—ã ‚Üí –ü—Ä–æ–µ–∫—Ç—ã:**\n"
                for client, project in client_mappings.items():
                    response += f"‚Ä¢ **{client}** ‚Üí `{project}`\n"
                response += "\n"
            else:
                response += "**–ö–ª–∏–µ–Ω—Ç—ã ‚Üí –ü—Ä–æ–µ–∫—Ç—ã:** –ü–æ–∫–∞ –Ω–µ—Ç\n\n"
            
            if user_mappings:
                response += "**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ‚Üí Username:**\n"
                for display_name, username in user_mappings.items():
                    response += f"‚Ä¢ **{display_name}** ‚Üí `{username}`\n"
            else:
                response += "**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ‚Üí Username:** –ü–æ–∫–∞ –Ω–µ—Ç\n"
            
            response += "\nüí° –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –º–∞–ø–ø–∏–Ω–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `–Ω–∞—É—á–∏`"
            
            return response
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞–ø–ø–∏–Ω–≥–æ–≤: {str(e)}"


    async def _handle_refresh_dictionaries(self, user_id: str, message: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤"""
        try:
            # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
            async with cache_service as cache:
                await cache.invalidate_jira_dictionaries(user_id)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
            success = await self._refresh_jira_dictionaries(user_id)
            
            if success:
                return """
‚úÖ **–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ Jira –æ–±–Ω–æ–≤–ª–µ–Ω—ã-30 app/services/message_processor.py*

–ó–∞–≥—Ä—É–∂–µ–Ω—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
‚Ä¢ –°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á
‚Ä¢ –¢–∏–ø—ã –∑–∞–¥–∞—á  
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
‚Ä¢ –ü—Ä–æ–µ–∫—Ç—ã

–¢–µ–ø–µ—Ä—å JQL –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏.
"""
            else:
                return "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ Jira."
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤: {str(e)}"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
message_processor = MessageProcessor()