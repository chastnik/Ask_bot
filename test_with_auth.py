#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–±—É—é—â–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
"""

import asyncio
import sys
import os

async def test_with_auth():
    """–¢–µ—Å—Ç —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    sys.path.insert(0, os.getcwd())
    
    try:
        print("ÔøΩÔøΩ –¢–ï–°–¢ –° –ê–í–¢–û–†–ò–ó–ê–¶–ò–ï–ô Ask Bot")
        print("=" * 50)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º MessageProcessor
        from app.services.message_processor import MessageProcessor
        processor = MessageProcessor()
        test_user_id = "test_user_auth"
        
        print("‚úÖ MessageProcessor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –ù–ï —Ç—Ä–µ–±—É—é—â–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        print("\nüìã –¢–ï–°–¢–´ –ë–ï–ó –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò:")
        
        no_auth_tests = [
            ("–ø–æ–º–æ—â—å", "Ask Bot"),
            ("help", "Ask Bot"), 
            ("–º–∞–ø–ø–∏–Ω–≥–∏", "–º–∞–ø–ø–∏–Ω–≥"),
            ("mappings", "–º–∞–ø–ø–∏–Ω–≥"),
        ]
        
        for query, expected in no_auth_tests:
            print(f"  ‚Ä¢ '{query}'...", end=" ")
            response = await processor.process_message(test_user_id, query)
            
            if expected.lower() in response.lower():
                print("‚úÖ")
            else:
                print("‚ùå")
                print(f"    –û–∂–∏–¥–∞–ª–∏: {expected}")
                print(f"    –ü–æ–ª—É—á–∏–ª–∏: {response[:100]}...")
        
        print("\nüîê –¢–ï–°–¢–´ –¢–†–ï–ë–£–Æ–©–ò–ï –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò:")
        print("    (–ü–æ–∫–∞–∂—É—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)")
        
        auth_required_tests = [
            ("—Å—Ç–∞—Ç—É—Å", "–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"),
            ("–ø—Ä–æ–µ–∫—Ç—ã", "–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"),
            ("–Ω–∞–π–¥–∏ –≤—Å—ë –ø—Ä–æ Qlik Sense", "–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"),
            ("–ø–æ–∫–∞–∂–∏ –º–æ–∏ –∑–∞–¥–∞—á–∏", "–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"),
        ]
        
        for query, expected in auth_required_tests:
            print(f"  ‚Ä¢ '{query}'...", end=" ")
            response = await processor.process_message(test_user_id, query)
            
            if expected.lower() in response.lower():
                print("‚úÖ (–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é)")
            else:
                print("‚ùå (–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç)")
                print(f"    –û—Ç–≤–µ—Ç: {response[:100]}...")
        
        print("\nüí° –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò:")
        print("   –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω–æ:")
        print("   1. –û—Ç–∫—Ä—ã—Ç—å Mattermost")
        print("   2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è [–ª–æ–≥–∏–Ω] [—Ç–æ–∫–µ–Ω]")
        print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã —Å–Ω–æ–≤–∞")
        print("")
        print("   –ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:")
        print("   –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è svchashin I5COX_EXo3yKB")
        
        print("\nüß™ –°–ò–ú–£–õ–Ø–¶–ò–Ø –ö–û–ú–ê–ù–î–´ –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò:")
        # –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ—Å—Ç–µ!
        auth_response = await processor.process_message(test_user_id, "–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è test_user fake_token")
        print(f"  –û—Ç–≤–µ—Ç –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é: {auth_response[:100]}...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    result = await test_with_auth()
    
    print("\n" + "=" * 50)
    if result:
        print("üéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û")
        print("")
        print("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
        print("‚úÖ –ö–æ–º–∞–Ω–¥—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
        print("")
        print("üöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("   1. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –±–æ—Ç–µ —á–µ—Ä–µ–∑ Mattermost")
        print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 test_bot_comprehensive.py")
        print("   3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ./run_tests.sh")
        return 0
    else:
        print("‚ùå –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –° –û–®–ò–ë–ö–ê–ú–ò")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
