"""
API —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhooks –æ—Ç Mattermost
"""
import time
from datetime import datetime
from typing import Dict, Any, Optional

from fastapi import APIRouter, HTTPException, Form, BackgroundTasks
from fastapi.responses import JSONResponse
from loguru import logger

from app.models.schemas import SlashCommandRequest, SlashCommandResponse, DirectMessageRequest
from app.services.jira_service import jira_service, JiraAPIError, JiraAuthError
from app.services.mattermost_service import mattermost_service
from app.services.llm_service import llm_service
from app.services.cache_service import cache_service
from app.services.chart_service import chart_service


router = APIRouter()


class BotLogic:
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞"""
    
    @staticmethod
    async def process_direct_message(user_query: str, user_id: str, user_name: str, channel_id: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_query: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Mattermost
            user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            channel_id: ID –∫–∞–Ω–∞–ª–∞ (–¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
            
        Returns:
            –û—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        start_time = time.time()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            query_lower = user_query.strip().lower()
            
            # –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
            if query_lower in ['–ø–æ–º–æ—â—å', 'help', '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å', '–∫–æ–º–∞–Ω–¥—ã']:
                return await BotLogic._handle_help_dm()
            
            # –ö–æ–º–∞–Ω–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if query_lower.startswith('–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è') or query_lower.startswith('auth'):
                return await BotLogic._handle_auth_dm(user_query, user_id)
            
            # –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å–∞
            if query_lower in ['—Å—Ç–∞—Ç—É—Å', 'status', '–º–æ–π —Å—Ç–∞—Ç—É—Å']:
                return await BotLogic._handle_status_dm(user_id)
            
            # –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–µ–∫—Ç—ã
            if query_lower in ['–ø—Ä–æ–µ–∫—Ç—ã', 'projects', '–º–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã']:
                return await BotLogic._handle_projects_dm(user_id)
            
            # –ö–æ–º–∞–Ω–¥—ã –∫–µ—à–∞
            if query_lower.startswith('–∫–µ—à') or query_lower.startswith('cache'):
                return await BotLogic._handle_cache_dm(query_lower, user_id)
                
            # –û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ LLM –∏ Jira
            return await BotLogic._process_jira_query_dm(user_query, user_id, user_name, channel_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_name}: {e}")
            return {
                "text": f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}",
                "response_type": "ephemeral"
            }
    
    @staticmethod
    async def process_user_query(user_query: str, user_id: str, channel_id: str) -> SlashCommandResponse:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_query: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Mattermost
            channel_id: ID –∫–∞–Ω–∞–ª–∞
            
        Returns:
            –û—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Mattermost
        """
        start_time = time.time()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–µ—à–∞
            async with cache_service as cache:
                credentials = await cache.get_cached_user_credentials(user_id)
                
            if not credentials:
                return mattermost_service.create_error_response(
                    "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Jira. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /jira auth"
                )
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é LLM
            async with llm_service as llm:
                intent_data = await llm.interpret_query_intent(user_query)
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à –¥–ª—è JQL –∑–∞–ø—Ä–æ—Å–æ–≤
            cached_result = None
            if intent_data.get("intent") in ["analytics", "search", "worklog"]:
                async with cache_service as cache:
                    # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    cache_key = cache.make_jql_cache_key(user_query, user_id)
                    cached_result = await cache.get_cached_jql_result(user_query, user_id)
            
            if cached_result:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                execution_time = time.time() - start_time
                async with mattermost_service as mm:
                    return mm.create_data_response(
                        title="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç (–∏–∑ –∫–µ—à–∞)",
                        data=cached_result.get("issues", [])[:10],  # –ü–µ—Ä–≤—ã–µ 10 –∑–∞–¥–∞—á
                        chart_url=cached_result.get("chart_url")
                    )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JQL –∑–∞–ø—Ä–æ—Å
            context = await BotLogic._get_user_context(user_id)
            
            async with llm_service as llm:
                jql_query = await llm.generate_jql_query(user_query, context)
                
            if not jql_query:
                return mattermost_service.create_error_response(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å."
                )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Jira
            async with jira_service as jira:
                search_result = await jira.search_issues(
                    jql=jql_query,
                    username=credentials["username"],
                    password=credentials.get("password"),
                    token=credentials.get("token"),
                    max_results=100
                )
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            chart_url = None
            if intent_data.get("needs_chart", False) and search_result.issues:
                chart_url = await BotLogic._create_chart_for_results(
                    search_result.issues, intent_data, user_query
                )
            
            # –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_data = {
                "issues": [issue.dict() for issue in search_result.issues],
                "total": search_result.total,
                "jql": jql_query,
                "chart_url": chart_url,
                "execution_time": time.time() - start_time
            }
            
            async with cache_service as cache:
                await cache.cache_jql_result(jql_query, user_id, result_data)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é LLM
            async with llm_service as llm:
                response_text = await llm.generate_response_text(result_data, user_query)
            
            # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            async with mattermost_service as mm:
                if chart_url:
                    return mm.create_slash_command_response(
                        text=f"{response_text}\nüìà [–û—Ç–∫—Ä—ã—Ç—å –≥—Ä–∞—Ñ–∏–∫]({chart_url})",
                        response_type="in_channel"
                    )
                else:
                    return mm.create_slash_command_response(
                        text=response_text,
                        response_type="in_channel"
                    )
                    
        except JiraAuthError:
            return mattermost_service.create_error_response(
                "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Jira. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: /jira auth"
            )
        except JiraAPIError as e:
            return mattermost_service.create_error_response(f"–û—à–∏–±–∫–∞ Jira API: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}", exc_info=True)
            return mattermost_service.create_error_response(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    @staticmethod
    async def _get_user_context(user_id: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ JQL
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏, –ø—Ä–æ–µ–∫—Ç–∞–º–∏, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        """
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        return {
            "clients": [
                {"name": "–ò–ª—å-–î–µ-–ë–æ—Ç—ç", "key": "IDB"},
                {"name": "–ë—É—Ä–≥–µ—Ä-–ö–∏–Ω–≥", "key": "BK"},
                {"name": "–õ–µ—Ç—É–∞–ª—å", "key": "LET"}
            ],
            "projects": [
                {"name": "–ë–∏—Ç—Ä–∏–∫—Å", "key": "BTX"},
                {"name": "Visiology", "key": "VIS"},
                {"name": "–ü–æ–¥–¥–µ—Ä–∂–∫–∞", "key": "SUP"}
            ],
            "users": [
                "–°–µ—Ä–≥–µ–π –ñ—É—Ä–∞–≤–ª—ë–≤", "–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞", "–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤"
            ]
        }
    
    @staticmethod
    async def _create_chart_for_results(issues: list, intent_data: Dict, user_query: str) -> Optional[str]:
        """
        –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
        
        Args:
            issues: –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á Jira
            intent_data: –î–∞–Ω–Ω—ã–µ –æ –Ω–∞–º–µ—Ä–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_query: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            URL —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –∏–ª–∏ None
        """
        try:
            chart_type = intent_data.get("chart_type", "bar")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –≤ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            issues_data = [issue.dict() for issue in issues]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
            if "—Å—Ç–∞—Ç—É—Å" in user_query.lower():
                chart_url = await chart_service.create_issues_by_status_chart(issues_data)
            elif "—Ç–∏–ø" in user_query.lower():
                chart_url = await chart_service.create_issues_by_type_chart(issues_data)
            elif "—á–∞—Å" in user_query.lower() or "–≤—Ä–µ–º—è" in user_query.lower():
                # –î–ª—è worklogs –Ω—É–∂–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                chart_url = None  # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–≥—Ä–µ–≥–∞—Ü–∏—é worklogs
            else:
                # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                if len(issues_data) > 0:
                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
                    project_counts = {}
                    for issue in issues_data:
                        project = issue.get("project_key", "Unknown")
                        project_counts[project] = project_counts.get(project, 0) + 1
                    
                    chart_data = [
                        {"project": project, "count": count}
                        for project, count in project_counts.items()
                    ]
                    
                    chart_url = await chart_service.create_bar_chart(
                        data=chart_data,
                        title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º",
                        x_axis="project",
                        y_axis="count"
                    )
                else:
                    chart_url = None
            
            return chart_url
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            return None


@router.post("/slash")
async def handle_slash_command(
    background_tasks: BackgroundTasks,
    token: str = Form(...),
    team_id: str = Form(...),
    team_domain: str = Form(...),
    channel_id: str = Form(...),
    channel_name: str = Form(...),
    user_id: str = Form(...),
    user_name: str = Form(...),
    command: str = Form(...),
    text: str = Form(...),
    response_url: Optional[str] = Form(None),
    trigger_id: Optional[str] = Form(None)
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ slash –∫–æ–º–∞–Ω–¥ –æ—Ç Mattermost
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞
        slash_request = SlashCommandRequest(
            token=token,
            team_id=team_id,
            team_domain=team_domain,
            channel_id=channel_id,
            channel_name=channel_name,
            user_id=user_id,
            user_name=user_name,
            command=command,
            text=text,
            response_url=response_url,
            trigger_id=trigger_id
        )
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ slash –∫–æ–º–∞–Ω–¥–∞ –æ—Ç {user_name}: {text}")
        
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
        command_parts = text.strip().split() if text.strip() else []
        command_name = command_parts[0].lower() if command_parts else ""
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        if not text.strip() or command_name == "help":
            return await handle_help_command()
            
        elif command_name == "auth":
            return await handle_auth_command(user_id, channel_id)
            
        elif command_name == "status":
            return await handle_status_command()
            
        elif command_name == "cache":
            if len(command_parts) > 1 and command_parts[1] == "clear":
                return await handle_cache_clear_command()
            elif len(command_parts) > 1 and command_parts[1] == "stats":
                return await handle_cache_stats_command()
            else:
                return mattermost_service.create_error_response(
                    "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∫–µ—à–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: cache clear –∏–ª–∏ cache stats"
                )
                
        elif command_name == "projects":
            return await handle_projects_command(user_id)
            
        else:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            return await BotLogic.process_user_query(text, user_id, channel_id)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ slash –∫–æ–º–∞–Ω–¥—ã: {e}", exc_info=True)
        return mattermost_service.create_error_response(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã"
        )


async def handle_help_command() -> SlashCommandResponse:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã help"""
    help_text = """
ü§ñ **Ask Bot - –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ Jira**

**üìä –ü—Ä–∏–º–µ—Ä—ã –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ `/jira –°–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ –ø–æ –∫–ª–∏–µ–Ω—Ç—É –ò–ª—å-–î–µ-–ë–æ—Ç—ç –≤ –∏—é–ª–µ?`
‚Ä¢ `/jira –ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ —Å–µ–π—á–∞—Å –≤ —Å—Ç–∞—Ç—É—Å–µ 'In Progress'?`
‚Ä¢ `/jira –°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Å–ø–∏—Å–∞–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç—É Visiology –≤ –º–∞–µ?`

**üìà –ó–∞–ø—Ä–æ—Å—ã —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π:**
‚Ä¢ `/jira –ü–æ–∫–∞–∂–∏ –≥—Ä–∞—Ñ–∏–∫ —Å–ø–∏—Å–∞–Ω–∏—è —á–∞—Å–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞`
‚Ä¢ `/jira –î–∏–∞–≥—Ä–∞–º–º–∞ –∑–∞–¥–∞—á –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∑–∞ –∏—é–Ω—å`
‚Ä¢ `/jira –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –ø–æ —Ç–∏–ø–∞–º –≤ –∏—é–ª–µ`

**‚ö° –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**
‚Ä¢ `/jira help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ `/jira auth` - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Jira
‚Ä¢ `/jira status` - —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
‚Ä¢ `/jira cache clear` - –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
‚Ä¢ `/jira cache stats` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞
‚Ä¢ `/jira projects` - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤

**üí° –°–æ–≤–µ—Ç:** –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º!
"""
    
    return mattermost_service.create_info_response(help_text, "ephemeral")


async def handle_auth_command(user_id: str, channel_id: str) -> SlashCommandResponse:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º DM —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        async with mattermost_service as mm:
            dm_text = """
üîê **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Jira**

–î–ª—è —Ä–∞–±–æ—Ç—ã —Å Jira –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:

**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Å–ø–æ—Å–æ–± (API Token):**
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Jira ‚Üí Profile ‚Üí Personal Access Tokens
2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
3. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
   `username your_username`
   `token your_api_token`

**–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± (–ø–∞—Ä–æ–ª—å):**
`username your_username`
`password your_password`

‚ö†Ô∏è **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:** –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —à–∏—Ñ—Ä—É—é—Ç—Å—è –∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ.
"""
            await mm.send_dm(user_id, dm_text)
            
        return mattermost_service.create_info_response(
            "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", "ephemeral"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã auth: {e}")
        return mattermost_service.create_error_response(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
        )


async def handle_status_command() -> SlashCommandResponse:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç—É—Å–∞"""
    try:
        status_parts = ["üîç **–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ Ask Bot:**\n"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis
        try:
            async with cache_service as cache:
                await cache.redis.ping()
                status_parts.append("‚úÖ Redis: –ø–æ–¥–∫–ª—é—á–µ–Ω")
        except:
            status_parts.append("‚ùå Redis: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Mattermost
        try:
            async with mattermost_service as mm:
                if await mm.test_connection():
                    status_parts.append("‚úÖ Mattermost: –ø–æ–¥–∫–ª—é—á–µ–Ω")
                else:
                    status_parts.append("‚ùå Mattermost: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except:
            status_parts.append("‚ùå Mattermost: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º LLM
        try:
            async with llm_service as llm:
                if await llm.test_connection():
                    status_parts.append("‚úÖ LLM: –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
                else:
                    status_parts.append("‚ùå LLM: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        except:
            status_parts.append("‚ùå LLM: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        
        status_parts.append("‚úÖ Jira: –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        status_parts.append("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –∞–∫—Ç–∏–≤–Ω–∞")
        
        return mattermost_service.create_info_response(
            "\n".join(status_parts), "ephemeral"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã status: {e}")
        return mattermost_service.create_error_response("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å")


async def handle_cache_clear_command() -> SlashCommandResponse:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞"""
    try:
        async with cache_service as cache:
            result = await cache.flush_all_cache()
            
        if result:
            return mattermost_service.create_info_response(
                "üóëÔ∏è –ö–µ—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω", "ephemeral"
            )
        else:
            return mattermost_service.create_error_response(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–µ—à"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞: {e}")
        return mattermost_service.create_error_response("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–µ—à–∞")


async def handle_cache_stats_command() -> SlashCommandResponse:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∞"""
    try:
        async with cache_service as cache:
            stats = await cache.get_cache_stats()
            
        if "error" in stats:
            return mattermost_service.create_error_response(stats["error"])
        
        stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞ Redis:**

‚Ä¢ **–í—Å–µ–≥–æ –∫–ª—é—á–µ–π:** {stats.get('total_keys', 0)}
‚Ä¢ **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:** {stats.get('memory_usage', 'N/A')}
‚Ä¢ **Hit Rate:** {stats.get('hit_rate', 0)}%
‚Ä¢ **–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:** {stats.get('connected_clients', 0)}

**–¢–∏–ø—ã –∫–ª—é—á–µ–π:**
"""
        
        for key_type, count in stats.get('key_types', {}).items():
            stats_text += f"‚Ä¢ {key_type}: {count}\n"
        
        return mattermost_service.create_info_response(stats_text, "ephemeral")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∞: {e}")
        return mattermost_service.create_error_response("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞")


    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    @staticmethod
    async def _handle_help_dm() -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
        help_text = """
ü§ñ **Ask Bot - –í–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ Jira**

**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ!

**–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ "–ü–æ–∫–∞–∂–∏ –º–æ–∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏"
‚Ä¢ "–°–∫–æ–ª—å–∫–æ –±–∞–≥–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ PROJECT_KEY?"
‚Ä¢ "–ó–∞–¥–∞—á–∏ –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –ø—Ä–æ–µ–∫—Ç–µ ABC"
‚Ä¢ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü"
‚Ä¢ "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ XYZ"

**–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `–ø–æ–º–æ—â—å` - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ `–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è [–ª–æ–≥–∏–Ω] [–ø–∞—Ä–æ–ª—å/—Ç–æ–∫–µ–Ω]` - –≤–æ–π—Ç–∏ –≤ Jira
‚Ä¢ `—Å—Ç–∞—Ç—É—Å` - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
‚Ä¢ `–ø—Ä–æ–µ–∫—Ç—ã` - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
‚Ä¢ `–∫–µ—à –æ—á–∏—Å—Ç–∏—Ç—å` - –æ—á–∏—Å—Ç–∏—Ç—å –∫–µ—à
‚Ä¢ `–∫–µ—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞

**–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤:**
–î–æ–±–∞–≤—å—Ç–µ "–ø–æ–∫–∞–∂–∏ –∫–∞–∫ –≥—Ä–∞—Ñ–∏–∫" –∫ –ª—é–±–æ–º—É –∑–∞–ø—Ä–æ—Å—É –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏!

–ü—Ä–∏–º–µ—Ä: "–ó–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –≤ –ø—Ä–æ–µ–∫—Ç–µ ABC –ø–æ–∫–∞–∂–∏ –∫–∞–∫ –≥—Ä–∞—Ñ–∏–∫"
"""
        return {"text": help_text}

    @staticmethod
    async def _handle_auth_dm(user_query: str, user_id: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
        parts = user_query.strip().split()
        
        if len(parts) < 3:
            return {
                "text": """
üîê **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Jira**

**–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:**
`–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è [–ª–æ–≥–∏–Ω] [–ø–∞—Ä–æ–ª—å/—Ç–æ–∫–µ–Ω]`

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ `–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è user@company.com mypassword`
‚Ä¢ `–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è username api_token_here`

**–î–ª—è Jira Cloud —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API —Ç–æ–∫–µ–Ω –≤–º–µ—Å—Ç–æ –ø–∞—Ä–æ–ª—è.**
"""
            }
        
        username = parts[1]
        password = parts[2]
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Jira
            test_result = await jira_service.test_credentials(username, password)
            
            if test_result:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à–µ
                async with cache_service as cache:
                    await cache.cache_user_credentials(user_id, username, password)
                
                return {
                    "text": f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Jira –∫–∞–∫ {username}"
                }
            else:
                return {
                    "text": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Jira. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å/—Ç–æ–∫–µ–Ω."
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return {
                "text": f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}"
            }

    @staticmethod
    async def _handle_status_dm(user_id: str) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
        try:
            async with cache_service as cache:
                credentials = await cache.get_cached_user_credentials(user_id)
                
            if credentials:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ –µ—â–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã
                test_result = await jira_service.test_credentials(
                    credentials['username'], 
                    credentials['password']
                )
                
                if test_result:
                    return {
                        "text": f"‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Jira –∫–∞–∫ **{credentials['username']}**"
                    }
                else:
                    # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    await cache.clear_user_credentials(user_id)
                    return {
                        "text": "‚ùå –í–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é."
                    }
            else:
                return {
                    "text": """
‚ùå **–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Jira**

–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
`–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è [–ª–æ–≥–∏–Ω] [–ø–∞—Ä–æ–ª—å/—Ç–æ–∫–µ–Ω]`
"""
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return {
                "text": f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}"
            }

    @staticmethod
    async def _handle_projects_dm(user_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
        try:
            async with cache_service as cache:
                credentials = await cache.get_cached_user_credentials(user_id)
                
            if not credentials:
                return {
                    "text": "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Jira. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è [–ª–æ–≥–∏–Ω] [–ø–∞—Ä–æ–ª—å]`"
                }
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
            projects = await jira_service.get_projects(
                credentials['username'],
                credentials['password']
            )
            
            if projects:
                projects_text = "üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã Jira:**\n\n"
                for project in projects[:20]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
                    projects_text += f"‚Ä¢ **{project.get('key')}** - {project.get('name')}\n"
                
                if len(projects) > 20:
                    projects_text += f"\n... –∏ –µ—â–µ {len(projects) - 20} –ø—Ä–æ–µ–∫—Ç–æ–≤"
                    
                return {"text": projects_text}
            else:
                return {
                    "text": "üìã –ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∏–º."
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return {
                "text": f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤: {str(e)}"
            }

    @staticmethod
    async def _handle_cache_dm(query: str, user_id: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∫–µ—à–∞ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
        if '–æ—á–∏—Å—Ç–∏—Ç—å' in query or 'clear' in query:
            try:
                async with cache_service as cache:
                    await cache.clear_user_cache(user_id)
                return {
                    "text": "‚úÖ –í–∞—à –∫–µ—à –æ—á–∏—â–µ–Ω"
                }
            except Exception as e:
                return {
                    "text": f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞: {str(e)}"
                }
                
        elif '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫' in query or 'stats' in query:
            try:
                async with cache_service as cache:
                    stats = await cache.get_cache_stats()
                
                stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞:**

‚Ä¢ **–í—Å–µ–≥–æ –∫–ª—é—á–µ–π:** {stats.get('total_keys', 0)}
‚Ä¢ **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:** {stats.get('memory_usage', 'N/A')}
‚Ä¢ **Hit Rate:** {stats.get('hit_rate', 0)}%

**–¢–∏–ø—ã –∫–ª—é—á–µ–π:**
"""
                for key_type, count in stats.get('key_types', {}).items():
                    stats_text += f"‚Ä¢ {key_type}: {count}\n"
                    
                return {"text": stats_text}
                
            except Exception as e:
                return {
                    "text": f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
                }
        else:
            return {
                "text": """
**–ö–æ–º–∞–Ω–¥—ã –∫–µ—à–∞:**
‚Ä¢ `–∫–µ—à –æ—á–∏—Å—Ç–∏—Ç—å` - –æ—á–∏—Å—Ç–∏—Ç—å –≤–∞—à –∫–µ—à
‚Ä¢ `–∫–µ—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞` - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞
"""
            }

    @staticmethod
    async def _process_jira_query_dm(user_query: str, user_id: str, user_name: str, channel_id: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Jira –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–µ—à–∞
            async with cache_service as cache:
                credentials = await cache.get_cached_user_credentials(user_id)
                
            if not credentials:
                return {
                    "text": """
‚ùå **–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Jira**

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:
`–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è [–ª–æ–≥–∏–Ω] [–ø–∞—Ä–æ–ª—å/—Ç–æ–∫–µ–Ω]`

–ü—Ä–∏–º–µ—Ä: `–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è user@company.com mytoken`
"""
                }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é LLM
            try:
                intent = await llm_service.analyze_intent(user_query)
                logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω intent: {intent}")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ intent: {e}")
                intent = {"type": "search", "needs_chart": False}
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JQL –∑–∞–ø—Ä–æ—Å
            try:
                # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                user_context = {"projects": [], "recent_queries": []}
                
                jql = await llm_service.generate_jql(user_query, user_context)
                logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω JQL: {jql}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ JQL: {e}")
                return {
                    "text": f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å: {str(e)}"
                }
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Jira
            try:
                issues = await jira_service.search_issues(
                    jql,
                    credentials['username'],
                    credentials['password'],
                    max_results=50
                )
                
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {len(issues) if issues else 0}")
                
            except JiraAuthError:
                # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                async with cache_service as cache:
                    await cache.clear_user_credentials(user_id)
                return {
                    "text": "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Jira. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é."
                }
            except JiraAPIError as e:
                return {
                    "text": f"‚ùå –û—à–∏–±–∫–∞ Jira API: {str(e)}"
                }
            
            if not issues:
                return {
                    "text": "üìã –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫
            needs_chart = intent.get("needs_chart", False) or any(
                word in user_query.lower() 
                for word in ["–≥—Ä–∞—Ñ–∏–∫", "–¥–∏–∞–≥—Ä–∞–º–º", "–≤–∏–∑—É–∞–ª–∏–∑", "chart", "–ø–æ–∫–∞–∂–∏ –∫–∞–∫"]
            )
            
            if needs_chart:
                # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
                chart_url = await BotLogic._create_chart_from_issues(issues, intent.get("chart_type", "bar"))
                
                if chart_url:
                    response_text = f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:** {len(issues)} –∑–∞–¥–∞—á(–∏)\n\n"
                    response_text += f"üìà **–ì—Ä–∞—Ñ–∏–∫:** {chart_url}\n\n"
                else:
                    response_text = f"üìã **–ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á:** {len(issues)}\n\n"
                    
                # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
                response_text += "**–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:**\n"
                for issue in issues[:5]:
                    response_text += f"‚Ä¢ **{issue.get('key')}** - {issue.get('fields', {}).get('summary', 'N/A')}\n"
                
                if len(issues) > 5:
                    response_text += f"\n... –∏ –µ—â–µ {len(issues) - 5} –∑–∞–¥–∞—á(–∏)"
                
            else:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
                response_text = f"üìã **–ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á:** {len(issues)}\n\n"
                
                for issue in issues[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 10 –∑–∞–¥–∞—á
                    fields = issue.get('fields', {})
                    response_text += f"‚Ä¢ **{issue.get('key')}** - {fields.get('summary', 'N/A')}\n"
                    response_text += f"  –°—Ç–∞—Ç—É—Å: {fields.get('status', {}).get('name', 'N/A')}\n\n"
                
                if len(issues) > 10:
                    response_text += f"... –∏ –µ—â–µ {len(issues) - 10} –∑–∞–¥–∞—á(–∏)"
            
            return {"text": response_text}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç {user_name}: {e}")
            return {
                "text": f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            }


async def handle_projects_command(user_id: str) -> SlashCommandResponse:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with cache_service as cache:
            credentials = await cache.get_cached_user_credentials(user_id)
            
        if not credentials:
            return mattermost_service.create_error_response(
                "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Jira: /jira auth"
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –∏–∑ Jira
        async with jira_service as jira:
            projects = await jira.get_projects(
                username=credentials["username"],
                password=credentials.get("password"),
                token=credentials.get("token")
            )
        
        if not projects:
            return mattermost_service.create_info_response(
                "–ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", "ephemeral"
            )
        
        projects_text = "üìÅ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã Jira:**\n\n"
        for project in projects[:20]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 20 –ø—Ä–æ–µ–∫—Ç–æ–≤
            projects_text += f"‚Ä¢ **{project['key']}** - {project['name']}\n"
            
        if len(projects) > 20:
            projects_text += f"\n... –∏ –µ—â—ë {len(projects) - 20} –ø—Ä–æ–µ–∫—Ç–æ–≤"
        
        return mattermost_service.create_info_response(projects_text, "ephemeral")
        
    except JiraAuthError:
        return mattermost_service.create_error_response(
            "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Jira. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: /jira auth"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
        return mattermost_service.create_error_response(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤"
        ) 


@router.post("/message")
async def handle_direct_message(request: DirectMessageRequest):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Mattermost
    
    –≠—Ç–æ—Ç endpoint –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –±–æ—Ç—É –Ω–∞–ø—Ä—è–º—É—é,
    –∞ –Ω–µ slash-–∫–æ–º–∞–Ω–¥—ã. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º.
    """
    try:
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {request.user_name}: {request.text}")
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–æ–≤
        if request.user_name.lower() in ['askbot', 'ask_bot', 'ask-bot']:
            logger.info("–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞")
            return {"text": ""}
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if not request.text.strip():
            return {"text": ""}
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –±–æ—Ç–∞
        response = await BotLogic.process_direct_message(
            request.text,
            request.user_id,
            request.user_name,
            request.channel_id
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if response.get("text"):
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Mattermost API
                await mattermost_service.send_direct_message(
                    request.user_id,
                    response["text"]
                )
                logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {request.user_name}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –≤ Mattermost: {e}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, —Ç–∞–∫ –∫–∞–∫ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —á–µ—Ä–µ–∑ API
        return {"text": ""}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {request.user_name}: {e}")
        
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            await mattermost_service.send_direct_message(
                request.user_id,
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
            )
        except Exception as send_error:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_error}")
        
        return {"text": ""}


@router.post("/events")
async def handle_mattermost_events(request: dict):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –æ—Ç Mattermost (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π)
    
    –≠—Ç–æ—Ç endpoint –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π —á–µ—Ä–µ–∑ Events API
    –≤–º–µ—Å—Ç–æ –ø—Ä—è–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ webhook
    """
    try:
        event_type = request.get("event", {}).get("event", "")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        if event_type != "posted":
            return {"status": "ignored"}
        
        post = request.get("event", {}).get("data", {}).get("post", {})
        
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if post:
            post_data = eval(post) if isinstance(post, str) else post
            
            channel_type = post_data.get("channel_type", "")
            user_id = post_data.get("user_id", "")
            message = post_data.get("message", "")
            channel_id = post_data.get("channel_id", "")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (D = Direct)
            if channel_type == "D" and message.strip():
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_info = await mattermost_service.get_user_info(user_id)
                user_name = user_info.get("username", "unknown") if user_info else "unknown"
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–ø—Ä–æ—Å–∞
                dm_request = DirectMessageRequest(
                    user_id=user_id,
                    user_name=user_name,
                    channel_id=channel_id,
                    channel_type=channel_type,
                    team_id=request.get("event", {}).get("data", {}).get("team_id", ""),
                    text=message,
                    post_id=post_data.get("id", "")
                )
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                return await handle_direct_message(dm_request)
        
        return {"status": "ok"}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è Mattermost: {e}")
        return {"status": "error", "message": str(e)} 