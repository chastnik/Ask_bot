"""
–û—Å–Ω–æ–≤–Ω–æ–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Ask Bot
–¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –ª–∏—á–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —á–µ—Ä–µ–∑ WebSocket
"""
import os
import asyncio
from contextlib import asynccontextmanager
from datetime import datetime
from typing import Dict, Any

from fastapi import FastAPI, HTTPException, Depends, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import JSONResponse
from loguru import logger

from app.config import settings
from app.models.schemas import HealthCheck, ErrorResponse
from app.services.jira_service import jira_service
from app.services.mattermost_service import mattermost_service
from app.services.llm_service import llm_service
from app.services.cache_service import cache_service
from app.services.chart_service import chart_service
from app.services.websocket_client import websocket_client
from app.services.message_processor import message_processor


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.add(
    "logs/askbot.log",
    rotation="10 MB",
    retention="7 days",
    level=settings.log_level,
    format="{time:YYYY-MM-DD HH:mm:ss} | {level} | {module}:{function}:{line} | {message}"
)

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
os.makedirs("logs", exist_ok=True)
os.makedirs(settings.chart_save_path, exist_ok=True)


async def handle_websocket_message(message_info: Dict[str, Any]):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç WebSocket –∫–ª–∏–µ–Ω—Ç–∞
    """
    try:
        user_id = message_info["user_id"]
        message_text = message_info["message"]
        
        logger.info(f"üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_id}: {message_text}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        response = await message_processor.process_message(user_id, message_text)
        
        if response:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            async with mattermost_service as mm:
                success = await mm.send_direct_message(user_id, response)
                
            if success:
                logger.info(f"üì§ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            async with mattermost_service as mm:
                await mm.send_direct_message(
                    message_info["user_id"],
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"
                )
        except Exception as send_error:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_error}")


async def start_websocket_client():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç WebSocket –∫–ª–∏–µ–Ω—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        websocket_client.set_message_handler(handle_websocket_message)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        while True:
            try:
                logger.info("üîå –ó–∞–ø—É—Å–∫ WebSocket –∫–ª–∏–µ–Ω—Ç–∞...")
                await websocket_client.connect()
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")
                logger.info("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(10)
                
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ WebSocket –∫–ª–∏–µ–Ω—Ç–∞: {e}")


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Ask Bot...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        async with cache_service as cache:
            logger.info("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
        async with mattermost_service as mm:
            if await mm.test_connection():
                logger.info("‚úÖ Mattermost –ø–æ–¥–∫–ª—é—á–µ–Ω")
            else:
                logger.warning("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Mattermost")
                
        async with jira_service as jira:
            logger.info("‚úÖ Jira —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        async with llm_service as llm:
            if await llm.test_connection():
                logger.info("‚úÖ LLM –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
            else:
                logger.warning("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ LLM")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket –∫–ª–∏–µ–Ω—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
        websocket_task = asyncio.create_task(start_websocket_client())
        
        logger.info("üéâ Ask Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        logger.info("üí¨ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –ª–∏—á–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        
    yield
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Ask Bot...")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    try:
        websocket_task.cancel()
        await websocket_client.disconnect()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è WebSocket: {e}")


# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="Ask Bot",
    description="–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —á–∞—Ç-–±–æ—Ç –¥–ª—è Jira —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π (—Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)",
    version="1.0.0",
    lifespan=lifespan
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
app.mount("/charts", StaticFiles(directory=settings.chart_save_path), name="charts")


@app.get("/", response_model=Dict[str, str])
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {
        "message": "Ask Bot API (—Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)",
        "version": "1.0.0",
        "status": "running",
        "mode": "direct_messages_only",
        "timestamp": datetime.now().isoformat()
    }


@app.get("/health", response_model=HealthCheck)
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        health_status = {
            "status": "healthy",
            "database": True,  # SQLite –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω
            "redis": False,
            "jira": False,
            "llm": False,
            "websocket": websocket_client.is_connected,
            "timestamp": datetime.now()
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis
        try:
            async with cache_service as cache:
                await cache.redis.ping()
                health_status["redis"] = True
        except Exception as e:
            logger.error(f"Redis health check failed: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Mattermost
        try:
            async with mattermost_service as mm:
                health_status["mattermost"] = await mm.test_connection()
        except Exception as e:
            logger.error(f"Mattermost health check failed: {e}")
            health_status["mattermost"] = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Jira (–±–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
        try:
            health_status["jira"] = True  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ URL –¥–æ—Å—Ç—É–ø–µ–Ω
        except Exception as e:
            logger.error(f"Jira health check failed: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º LLM
        try:
            async with llm_service as llm:
                health_status["llm"] = await llm.test_connection()
        except Exception as e:
            logger.error(f"LLM health check failed: {e}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        if all([health_status["redis"], health_status.get("mattermost", False), 
                health_status["jira"], health_status["llm"], health_status["websocket"]]):
            health_status["status"] = "healthy"
        elif health_status["database"]:
            health_status["status"] = "degraded"
        else:
            health_status["status"] = "unhealthy"
        
        return HealthCheck(**health_status)
        
    except Exception as e:
        logger.error(f"Health check error: {e}")
        return HealthCheck(
            status="error",
            database=False,
            redis=False,
            jira=False,
            llm=False,
            websocket=False,
            timestamp=datetime.now()
        )


@app.get("/cache/stats")
async def get_cache_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à–∞"""
    try:
        async with cache_service as cache:
            stats = await cache.get_cache_stats()
            return JSONResponse(content=stats)
    except Exception as e:
        logger.error(f"Error getting cache stats: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/cache/clear")
async def clear_cache():
    """–û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à"""
    try:
        async with cache_service as cache:
            result = await cache.flush_all_cache()
            if result:
                return {"message": "–ö–µ—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω"}
            else:
                raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–µ—à")
    except Exception as e:
        logger.error(f"Error clearing cache: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/websocket/status")
async def websocket_status():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    return {
        "connected": websocket_client.is_connected,
        "bot_username": websocket_client.bot_username,
        "base_url": websocket_client.base_url,
        "timestamp": datetime.now().isoformat()
    }


@app.post("/charts/cleanup")
async def cleanup_old_charts(background_tasks: BackgroundTasks, days: int = 7):
    """–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏"""
    try:
        def cleanup_task():
            import asyncio
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            try:
                deleted_count = loop.run_until_complete(
                    chart_service.cleanup_old_charts(days)
                )
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤: {deleted_count}")
            finally:
                loop.close()
        
        background_tasks.add_task(cleanup_task)
        return {"message": f"–ó–∞–ø—É—â–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π"}
        
    except Exception as e:
        logger.error(f"Error scheduling chart cleanup: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/debug/test-llm")
async def test_llm_connection():
    """–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ LLM"""
    try:
        async with llm_service as llm:
            response = await llm.generate_completion(
                prompt="–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
                temperature=0.7,
                max_tokens=50
            )
            return {
                "status": "success",
                "response": response,
                "timestamp": datetime.now().isoformat()
            }
    except Exception as e:
        logger.error(f"LLM test error: {e}")
        return {
            "status": "error",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }


@app.get("/debug/test-jira")
async def test_jira_connection():
    """–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Jira (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)"""
    try:
        # –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–¥–∞—á–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        return {
            "status": "info",
            "message": "–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Jira –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "timestamp": datetime.now().isoformat()
        }
    except Exception as e:
        logger.error(f"Jira test error: {e}")
        return {
            "status": "error", 
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }


@app.exception_handler(HTTPException)
async def http_exception_handler(request, exc):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    logger.error(f"HTTP {exc.status_code}: {exc.detail}")
    return JSONResponse(
        status_code=exc.status_code,
        content=ErrorResponse(
            error=exc.detail,
            code=str(exc.status_code),
            timestamp=datetime.now()
        ).dict()
    )


@app.exception_handler(Exception)
async def general_exception_handler(request, exc):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–∏—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    logger.error(f"Unexpected error: {exc}", exc_info=True)
    return JSONResponse(
        status_code=500,
        content=ErrorResponse(
            error="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
            detail=str(exc) if settings.app_mode == "development" else None,
            code="500",
            timestamp=datetime.now()
        ).dict()
    )


# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    import uvicorn
    
    uvicorn.run(
        "app.main:app",
        host=settings.host,
        port=settings.port,
        reload=settings.app_mode == "development",
        log_level=settings.log_level.lower()
    ) 