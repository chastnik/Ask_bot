"""
WebSocket –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Mattermost
"""
import asyncio
import json
import websockets
from typing import Dict, Any, Optional, Callable
from urllib.parse import urljoin, urlparse
from loguru import logger

from app.config import settings


class MattermostWebSocketClient:
    """WebSocket –∫–ª–∏–µ–Ω—Ç –¥–ª—è Mattermost"""
    
    def __init__(self):
        self.base_url = settings.mattermost_url
        self.token = settings.mattermost_token
        self.bot_username = settings.mattermost_bot_username
        self.ws = None
        self.user_id = None
        self.is_connected = False
        self.message_handler: Optional[Callable] = None
        
    def set_message_handler(self, handler: Callable[[Dict[str, Any]], None]):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.message_handler = handler
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Mattermost WebSocket API"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º WebSocket URL
            ws_url = self._get_websocket_url()
            
            logger.info(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Mattermost WebSocket: {ws_url}")
            
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
            self.ws = await websockets.connect(
                ws_url,
                additional_headers={"Authorization": f"Bearer {self.token}"},
                ping_interval=30,
                ping_timeout=10
            )
            
            self.is_connected = True
            logger.info("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
            await self._authenticate()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π
            await self._listen_messages()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            self.is_connected = False
            raise
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç WebSocket"""
        if self.ws:
            await self.ws.close()
            self.is_connected = False
            logger.info("üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
    
    def _get_websocket_url(self) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç WebSocket URL"""
        parsed = urlparse(self.base_url)
        ws_scheme = "wss" if parsed.scheme == "https" else "ws"
        return f"{ws_scheme}://{parsed.netloc}/api/v4/websocket"
    
    async def _authenticate(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é"""
        auth_message = {
            "seq": 1,
            "action": "authentication_challenge",
            "data": {
                "token": self.token
            }
        }
        
        await self.ws.send(json.dumps(auth_message))
        logger.debug("üîê –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    
    async def _listen_messages(self):
        """–°–ª—É—à–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            async for message in self.ws:
                await self._handle_websocket_message(message)
        except websockets.exceptions.ConnectionClosed:
            logger.warning("‚ö†Ô∏è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
            self.is_connected = False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            self.is_connected = False
    
    async def _handle_websocket_message(self, message: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            data = json.loads(message)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
            event_type = data.get("event", "")
            
            if event_type == "hello":
                # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
                logger.info("üëã –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç Mattermost")
                # –ü–æ–ª—É—á–∞–µ–º ID –±–æ—Ç–∞
                await self._get_bot_user_id()
                
            elif event_type == "posted":
                # –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ posted: {data}")
                await self._handle_posted_event(data)
                
            elif event_type == "status_change":
                # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                logger.debug(f"üìä –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω: {data}")
                
            else:
                logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event_type}")
                
        except json.JSONDecodeError:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON —Å–æ–æ–±—â–µ–Ω–∏—è")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _handle_posted_event(self, data: Dict[str, Any]):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            logger.info(f"üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ posted —Å–æ–±—ã—Ç–∏—è: {data}")
            event_data = data.get("data", {})
            post_data = event_data.get("post")
            
            if not post_data:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞ –≤ posted —Å–æ–±—ã—Ç–∏–∏")
                return
            
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
            if isinstance(post_data, str):
                post_data = json.loads(post_data)
            
            message = post_data.get("message", "").strip()
            user_id = post_data.get("user_id", "")
            channel_id = post_data.get("channel_id", "")
            # channel_type –±–µ—Ä–µ–º –∏–∑ event_data, –∞ –Ω–µ –∏–∑ post_data!
            channel_type = event_data.get("channel_type", "")
            
            logger.info(f"üìù –ü–æ—Å—Ç: user_id={user_id}, channel_type={channel_type}, message='{message}'")
            logger.info(f"ü§ñ ID –±–æ—Ç–∞: {self.user_id}")
            
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
            if user_id == self.user_id:
                logger.info("üö´ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞")
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫–∞–Ω–∞–ª —Ç–∏–ø–∞ D)
            if channel_type == "D" and message:
                logger.info(f"üí¨ –ü–æ–ª—É—á–µ–Ω–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {message}")
                
                # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
                if self.message_handler:
                    message_info = {
                        "user_id": user_id,
                        "channel_id": channel_id,
                        "message": message,
                        "post_id": post_data.get("id", "")
                    }
                    
                    await self.message_handler(message_info)
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ posted —Å–æ–±—ã—Ç–∏—è: {e}")
    
    async def _get_bot_user_id(self):
        """–ü–æ–ª—É—á–∞–µ—Ç ID –±–æ—Ç–∞ —á–µ—Ä–µ–∑ API"""
        try:
            from app.services.mattermost_service import mattermost_service
            async with mattermost_service as mm:
                bot_user = await mm.get_me()
                if bot_user:
                    self.user_id = bot_user.get("id")
                    logger.info(f"üÜî ID –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {self.user_id}")
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –±–æ—Ç–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –±–æ—Ç–∞: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
websocket_client = MattermostWebSocketClient()