#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∫–ª—é—á–µ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π Ask Bot
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞ ~30 —Å–µ–∫—É–Ω–¥

–ó–∞–ø—É—Å–∫: python3 quick_test.py
"""

import asyncio
import sys
from datetime import datetime

async def quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∫–ª—é—á–µ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    
    try:
        from app.services.message_processor import MessageProcessor
    except ImportError:
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å MessageProcessor")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞")
        return False
    
    processor = MessageProcessor()
    test_user_id = "quick_test_user"
    
    # –ö–ª—é—á–µ–≤—ã–µ —Ç–µ—Å—Ç—ã
    key_tests = [
        {
            "name": "–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏",
            "query": "–ø–æ–º–æ—â—å", 
            "expected": "Ask Bot",
            "critical": True
        },
        {
            "name": "–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å", 
            "query": "—Å—Ç–∞—Ç—É—Å",
            "expected": "–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
            "critical": True
        },
        {
            "name": "–¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)",
            "query": "–Ω–∞–π–¥–∏ –≤—Å—ë –ø—Ä–æ Qlik Sense",
            "expected": "–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",  # –û–∂–∏–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            "critical": False  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        },
        {
            "name": "–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)", 
            "query": "–ø–æ–∫–∞–∂–∏ –º–æ–∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏",
            "expected": "–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",  # –û–∂–∏–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            "critical": False
        },
        {
            "name": "–û–±—É—á–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–æ–≤",
            "query": '–Ω–∞—É—á–∏ –∫–ª–∏–µ–Ω—Ç "–¢–µ—Å—Ç" –ø—Ä–æ–µ–∫—Ç "TEST"',
            "expected": "–∑–Ω–∞—é",  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—â–µ–º "–∑–Ω–∞—é" –≤–º–µ—Å—Ç–æ "–Ω–∞—É—á–µ–Ω"
            "critical": True
        },
        {
            "name": "–ü–æ–∫–∞–∑–∞—Ç—å –º–∞–ø–ø–∏–Ω–≥–∏",
            "query": "–º–∞–ø–ø–∏–Ω–≥–∏",
            "expected": "–º–∞–ø–ø–∏–Ω–≥",
            "critical": True
        }
    ]
    
    print("‚ö° –ë–´–°–¢–†–´–ô –¢–ï–°–¢ Ask Bot")
    print("=" * 40)
    print(f"üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%H:%M:%S')}")
    print()
    
    passed = 0
    failed = 0
    critical_failed = 0
    
    for i, test in enumerate(key_tests, 1):
        print(f"[{i}/{len(key_tests)}] {test['name']:<40}", end=" ")
        
        try:
            response = await processor.process_message(test_user_id, test['query'])
            
            if test['expected'].lower() in response.lower():
                print("‚úÖ PASSED")
                passed += 1
            else:
                print("‚ùå FAILED")
                failed += 1
                if test['critical']:
                    critical_failed += 1
                print(f"      –û–∂–∏–¥–∞–ª–∏: '{test['expected']}'")
                print(f"      –ü–æ–ª—É—á–∏–ª–∏: {response[:100]}{'...' if len(response) > 100 else ''}")
                
        except Exception as e:
            print("‚ùå ERROR")
            failed += 1
            if test['critical']:
                critical_failed += 1
            print(f"      –û—à–∏–±–∫–∞: {str(e)}")
        
        print()
    
    print("=" * 40)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"   ‚úÖ –ü—Ä–æ—à–ª–∏: {passed}")
    print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å: {failed}")
    print(f"   üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏: {critical_failed}")
    print()
    
    if critical_failed > 0:
        print("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –û–ë–ù–ê–†–£–ñ–ï–ù–´!")
        print("   –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        return False
    elif failed == 0:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò!")
        print("   –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ")
        return True
    else:
        print("‚ö†Ô∏è  –ï–°–¢–¨ –ù–ï–ó–ù–ê–ß–ò–¢–ï–õ–¨–ù–´–ï –ü–†–û–ë–õ–ï–ú–´")
        print("   –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç, –Ω–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        return True

async def main():
    success = await quick_test()
    
    print()
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if success:
        print("   ‚Ä¢ –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ Jira:")
        print("     –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è svchashin I5COX_EXo3yKB")
        print("   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: python3 test_bot_comprehensive.py")
        print("   ‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ./run_tests.sh")
    else:
        print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: tail -f logs/askbot.log")
        print("   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω: curl http://localhost:8000/health")
        print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Jira –∏ LLM")
    
    return 0 if success else 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
