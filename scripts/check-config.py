#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Ask Bot

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
- –ù–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
- –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
- –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
- –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫
"""

import os
import sys
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
root_dir = Path(__file__).parent.parent
sys.path.insert(0, str(root_dir))

from app.config import settings
from app.services.mattermost_service import MattermostService
from app.services.jira_service import JiraService

def print_section(title: str):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏"""
    print(f"\n{'='*50}")
    print(f"üîç {title}")
    print('='*50)

def print_success(message: str):
    """–ü–µ—á–∞—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ"""
    print(f"‚úÖ {message}")

def print_error(message: str):
    """–ü–µ—á–∞—Ç–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
    print(f"‚ùå {message}")

def print_warning(message: str):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
    print(f"‚ö†Ô∏è  {message}")

def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞"""
    print_section("–ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞")
    
    env_path = root_dir / ".env"
    env_example_path = root_dir / "env.example"
    
    if env_path.exists():
        print_success(f".env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {env_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = env_path.stat().st_size
        if file_size < 100:
            print_warning(f".env —Ñ–∞–π–ª –æ—á–µ–Ω—å –º–∞–ª ({file_size} –±–∞–π—Ç). –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω.")
        else:
            print_success(f"–†–∞–∑–º–µ—Ä .env —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
            
    else:
        print_error(f".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {env_path}")
        
        if env_example_path.exists():
            print_warning(f"–ù–∞–π–¥–µ–Ω –ø—Ä–∏–º–µ—Ä: {env_example_path}")
            print_warning("–°–∫–æ–ø–∏—Ä—É–π—Ç–µ env.example –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
            print_warning(f"cp {env_example_path} {env_path}")
        else:
            print_error("–§–∞–π–ª env.example —Ç–æ–∂–µ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        
        return False
    
    return True

def check_required_settings():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print_section("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    required_settings = {
        'mattermost_url': ('URL Mattermost —Å–µ—Ä–≤–µ—Ä–∞', 'https://'),
        'mattermost_token': ('–¢–æ–∫–µ–Ω Mattermost –±–æ—Ç–∞', None),
        'mattermost_team_id': ('ID –∫–æ–º–∞–Ω–¥—ã –≤ Mattermost', None),
        'jira_base_url': ('URL Jira —Å–µ—Ä–≤–µ—Ä–∞', 'https://'),
    }
    
    all_good = True
    
    for setting_name, (description, expected_prefix) in required_settings.items():
        value = getattr(settings, setting_name, '')
        
        if not value:
            print_error(f"{setting_name}: –Ω–µ –∑–∞–¥–∞–Ω ({description})")
            all_good = False
        elif expected_prefix and not value.startswith(expected_prefix):
            print_warning(f"{setting_name}: –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û–∂–∏–¥–∞–µ—Ç—Å—è: {expected_prefix}...")
            print(f"   –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {value[:50]}...")
        else:
            # –°–∫—Ä—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            if 'token' in setting_name.lower():
                display_value = value[:8] + '*' * (len(value) - 8) if len(value) > 8 else value
            else:
                display_value = value
            print_success(f"{setting_name}: {display_value}")
    
    return all_good

def check_optional_settings():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print_section("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    optional_settings = {
        'llm_proxy_url': 'URL LLM —Å–µ—Ä–≤–∏—Å–∞',
        'redis_url': 'URL Redis —Å–µ—Ä–≤–µ—Ä–∞',
        'database_url': 'URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
    }
    
    for setting_name, description in optional_settings.items():
        value = getattr(settings, setting_name, '')
        if value:
            print_success(f"{setting_name}: {value}")
        else:
            print_warning(f"{setting_name}: –Ω–µ –∑–∞–¥–∞–Ω ({description})")

async def check_services():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print_section("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Mattermost
    print("üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Mattermost...")
    try:
        mattermost = MattermostService()
        result = await mattermost.test_connection()
        if result:
            print_success("Mattermost: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        else:
            print_error("Mattermost: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    except Exception as e:
        print_error(f"Mattermost: {str(e)}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Jira (–±–µ–∑ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
    print("üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Jira...")
    try:
        jira = JiraService()
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ URL
        import aiohttp
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"{settings.jira_base_url}/rest/api/2/serverInfo",
                timeout=aiohttp.ClientTimeout(total=10)
            ) as response:
                if response.status in [200, 401, 403]:  # 401/403 –æ–∑–Ω–∞—á–∞—é—Ç —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω
                    print_success("Jira: —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    print_warning(f"Jira: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å {response.status}")
    except Exception as e:
        print_error(f"Jira: {str(e)}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
    print("üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis...")
    try:
        import redis.asyncio as redis
        r = redis.from_url(settings.redis_url)
        await r.ping()
        await r.close()
        print_success("Redis: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        print_error(f"Redis: {str(e)}")

def check_directories():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    print_section("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π")
    
    directories = {
        'charts': settings.charts_dir,
        'logs': './logs'
    }
    
    for dir_name, dir_path in directories.items():
        path = Path(dir_path)
        if path.exists():
            print_success(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_name}: {path} (—Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
        else:
            print_warning(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {dir_name}: {path} (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)")

def print_summary(has_env: bool, has_required: bool):
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É"""
    print_section("–ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞")
    
    if has_env and has_required:
        print_success("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print_success("Ask Bot –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É.")
        print("\nüöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π:")
        print("   ./scripts/quick-start.sh")
        print("   –∏–ª–∏")
        print("   ./scripts/run.sh")
    else:
        print_error("–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π!")
        print("\nüîß –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:")
        
        if not has_env:
            print("   1. –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –∏–∑ –ø—Ä–∏–º–µ—Ä–∞:")
            print("      cp env.example .env")
        
        if not has_required:
            print("   2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ")
            print("   3. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è Mattermost –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ Jira")
        
        print("\nüìö –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ README.md")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("ü§ñ Ask Bot - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {root_dir}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
    has_env = check_env_file()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    has_required = check_required_settings()
    check_optional_settings()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    check_directories()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å—Ç—å)
    if has_env and has_required:
        await check_services()
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
    print_summary(has_env, has_required)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1) 