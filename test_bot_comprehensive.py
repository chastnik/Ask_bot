#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç Ask Bot
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Ç–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞

–ó–∞–ø—É—Å–∫: python3 test_bot_comprehensive.py
–ó–∞–ø—É—Å–∫ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π: python3 test_bot_comprehensive.py --auth
–ó–∞–ø—É—Å–∫ —Å –¥–∞–Ω–Ω—ã–º–∏: python3 test_bot_comprehensive.py --login user --password pass
"""

import asyncio
import json
import time
import sys
import argparse
import getpass
from typing import List, Dict, Any
from dataclasses import dataclass
from datetime import datetime

@dataclass
class TestCase:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–ª—É—á–∞—è"""
    category: str
    query: str
    expected_keywords: List[str]  # –û–∂–∏–¥–∞–µ–º—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –æ—Ç–≤–µ—Ç–µ
    should_not_contain: List[str] = None  # –ß—Ç–æ –ù–ï –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ
    description: str = ""
    priority: str = "normal"  # low, normal, high, critical

class BotTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞"""
    
    def __init__(self, with_auth: bool = False):
        self.test_user_id = "test_user_12345"
        self.results = []
        self.with_auth = with_auth
        self.auth_credentials = None
    
    def get_auth_credentials(self, login: str = None, password: str = None) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        if login and password:
            return {"login": login, "password": password}
        
        print()
        print("üîê –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –í JIRA –î–õ–Ø –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 50)
        print("–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞ –Ω—É–∂–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Jira.")
        print("–î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è.")
        print()
        
        try:
            login = input("–õ–æ–≥–∏–Ω Jira: ").strip()
            if not login:
                print("‚ùå –õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return None
            
            password = getpass.getpass("–ü–∞—Ä–æ–ª—å/—Ç–æ–∫–µ–Ω Jira: ").strip()
            if not password:
                print("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
                return None
                
            return {"login": login, "password": password}
            
        except KeyboardInterrupt:
            print("\n‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None
    
    async def authorize_in_jira(self, credentials: Dict[str, str]) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Jira"""
        if not credentials:
            return False
            
        try:
            from app.services.message_processor import MessageProcessor
            
            processor = MessageProcessor()
            auth_command = f"–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è {credentials['login']} {credentials['password']}"
            
            print(f"üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Jira –∫–∞–∫ {credentials['login']}...")
            response = await processor.process_message(self.test_user_id, auth_command)
            
            if "–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è" in response:
                print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å
                print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
                status_response = await processor.process_message(self.test_user_id, "—Å—Ç–∞—Ç—É—Å")
                
                if "–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" in status_response.lower():
                    print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∫–µ—à–µ!")
                    self.auth_credentials = credentials
                    return True
                else:
                    print(f"‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å –≤ –∫–µ—à–µ: {status_response}")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return False
        
    def get_test_cases(self) -> List[TestCase]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏"""
        test_cases = []
        
        # ========================================
        # 1. –ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ò –ü–û–ú–û–©–¨
        # ========================================
        management_tests = [
            TestCase("—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "–ø–æ–º–æ—â—å", ["Ask Bot", "–∫–æ–º–∞–Ω–¥—ã", "–ø—Ä–∏–º–µ—Ä—ã"], 
                    description="–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"),
            TestCase("—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "help", ["Ask Bot", "–∫–æ–º–∞–Ω–¥—ã"], 
                    description="–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"),
            TestCase("—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "—Å—Ç–∞—Ç—É—Å", ["–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", "Jira", "svchashin"], 
                    description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"),
            TestCase("—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "status", ["–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", "Jira", "svchashin"], 
                    description="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"),
            TestCase("—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "–ø—Ä–æ–µ–∫—Ç—ã", ["–ø—Ä–æ–µ–∫—Ç"], 
                    description="–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"),
            TestCase("—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "projects", ["–ø—Ä–æ–µ–∫—Ç"], 
                    description="–°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"),
        ]
        
        # ========================================
        # 2. –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–≠–®–ï–ú –ò –ú–ê–ü–ü–ò–ù–ì–ê–ú–ò
        # ========================================
        cache_tests = [
            TestCase("–∫—ç—à", "–∫–µ—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", ["–∫–µ—à", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"], 
                    description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞"),
            TestCase("–∫—ç—à", "–∫–µ—à –æ—á–∏—Å—Ç–∏—Ç—å", ["–∫–µ—à –æ—á–∏—â–µ–Ω"], 
                    description="–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"),
            TestCase("–∫—ç—à", "–º–∞–ø–ø–∏–Ω–≥–∏", ["–º–∞–ø–ø–∏–Ω–≥", "–ö–ª–∏–µ–Ω—Ç—ã"], 
                    description="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–∞–ø–ø–∏–Ω–≥–∏"),
            TestCase("–∫—ç—à", "mappings", ["–º–∞–ø–ø–∏–Ω–≥"], 
                    description="–ú–∞–ø–ø–∏–Ω–≥–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"),
            TestCase("–∫—ç—à", "–æ–±–Ω–æ–≤–∏—Ç—å", ["—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫", "–æ–±–Ω–æ–≤–ª"], 
                    description="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ Jira"),
            TestCase("–∫—ç—à", "refresh", ["—Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫"], 
                    description="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º"),
        ]
        
        # ========================================
        # 3. –ö–û–ú–ê–ù–î–´ –û–ë–£–ß–ï–ù–ò–Ø
        # ========================================
        learning_tests = [
            TestCase("–æ–±—É—á–µ–Ω–∏–µ", '–Ω–∞—É—á–∏ –∫–ª–∏–µ–Ω—Ç "–¢–µ—Å—Ç–æ–≤—ã–π –ö–ª–∏–µ–Ω—Ç" –ø—Ä–æ–µ–∫—Ç "TEST"', 
                    ["–û—Ç–ª–∏—á–Ω–æ", "–∑–Ω–∞—é", "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç"], 
                    description="–û–±—É—á–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—é –∫–ª–∏–µ–Ω—Ç->–ø—Ä–æ–µ–∫—Ç"),
            TestCase("–æ–±—É—á–µ–Ω–∏–µ", '–Ω–∞—É—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤" username "iivanov"', 
                    ["–û—Ç–ª–∏—á–Ω–æ", "–∑–Ω–∞—é", "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç"], 
                    description="–û–±—É—á–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—é –∏–º—è->username"),
            TestCase("–æ–±—É—á–µ–Ω–∏–µ", "–Ω–∞—É—á–∏ –∫–ª–∏–µ–Ω—Ç –ê–∫–º–µ –ø—Ä–æ–µ–∫—Ç ACME", 
                    ["–û—Ç–ª–∏—á–Ω–æ", "–∑–Ω–∞—é"], 
                    description="–û–±—É—á–µ–Ω–∏–µ –±–µ–∑ –∫–∞–≤—ã—á–µ–∫"),
            TestCase("–æ–±—É—á–µ–Ω–∏–µ", "–Ω–∞—É—á–∏", ["–ö–æ–º–∞–Ω–¥—ã –æ–±—É—á–µ–Ω–∏—è", "–Ω–∞—É—á–∏ –∫–ª–∏–µ–Ω—Ç"], 
                    description="–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–µ –Ω–∞—É—á–∏"),
        ]
        
        # ========================================
        # 4. –ü–û–ò–°–ö –ò –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ó–ê–î–ê–ß
        # ========================================
        search_tests = [
            TestCase("–ø–æ–∏—Å–∫", "–ø–æ–∫–∞–∂–∏ –º–æ–∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏", 
                    ["–∑–∞–¥–∞—á", "–æ—Ç–∫—Ä—ã—Ç"], ["–æ—à–∏–±–∫–∞"],
                    description="–ú–æ–∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏"),
            TestCase("–ø–æ–∏—Å–∫", "–Ω–∞–π–¥–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ ABC", 
                    ["–∑–∞–¥–∞—á", "–ø—Ä–æ–µ–∫—Ç"], ["–æ—à–∏–±–∫–∞"],
                    description="–ó–∞–¥–∞—á–∏ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ"),
            TestCase("–ø–æ–∏—Å–∫", "–ø–æ–∫–∞–∂–∏ –∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü", 
                    ["–∑–∞–¥–∞—á", "–∑–∞–∫—Ä—ã—Ç"], ["–æ—à–∏–±–∫–∞"],
                    description="–ó–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥"),
            TestCase("–ø–æ–∏—Å–∫", "–Ω–∞–π–¥–∏ –∑–∞–¥–∞—á–∏ –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è", 
                    ["–∑–∞–¥–∞—á"], ["–æ—à–∏–±–∫–∞"],
                    description="–ù–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"),
            TestCase("–ø–æ–∏—Å–∫", "–ø–æ–∫–∞–∂–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏", 
                    ["–∑–∞–¥–∞—á"], ["–æ—à–∏–±–∫–∞"],
                    description="–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"),
            TestCase("–ø–æ–∏—Å–∫", "–Ω–∞–π–¥–∏ –±–∞–≥–∏ –≤ –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º", 
                    ["–∑–∞–¥–∞—á"], ["–æ—à–∏–±–∫–∞"],
                    description="–ë–∞–≥–∏ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º"),
            TestCase("–ø–æ–∏—Å–∫", "–ø–æ–∫–∞–∂–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤", 
                    ["–∑–∞–¥–∞—á", "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª"], ["–æ—à–∏–±–∫–∞"],
                    description="–ó–∞–¥–∞—á–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"),
            TestCase("–ø–æ–∏—Å–∫", "–Ω–∞–π–¥–∏ Epic-–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ XYZ", 
                    ["–∑–∞–¥–∞—á", "Epic"], ["–æ—à–∏–±–∫–∞"],
                    description="–ü–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É –∑–∞–¥–∞—á"),
        ]
        
        # ========================================
        # 5. –¢–ï–ö–°–¢–û–í–´–ô –ü–û–ò–°–ö –ü–û –°–û–î–ï–†–ñ–ò–ú–û–ú–£
        # ========================================
        text_search_tests = [
            TestCase("—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫", "–Ω–∞–π–¥–∏ –∑–∞–¥–∞—á–∏ –ø—Ä–æ Power BI", 
                    ["–∑–∞–¥–∞—á", "Power BI"], ["–æ—à–∏–±–∫–∞"],
                    description="–ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º", priority="high"),
            TestCase("—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫", "–Ω–∞–π–¥–∏ –≤—Å—ë –ø—Ä–æ Qlik Sense", 
                    ["–∑–∞–¥–∞—á", "Qlik Sense"], ["–æ—à–∏–±–∫–∞"],
                    description="–ü–æ–∏—Å–∫ –≤—Å–µ–≥–æ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É", priority="high"),
            TestCase("—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫", "–ø–æ–∏—Å–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π Python", 
                    ["–∑–∞–¥–∞—á", "Python"], ["–æ—à–∏–±–∫–∞"],
                    description="–ü–æ–∏—Å–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"),
            TestCase("—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫", "–Ω–∞–π–¥–∏ –∑–∞–¥–∞—á–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å API", 
                    ["–∑–∞–¥–∞—á", "API"], ["–æ—à–∏–±–∫–∞"],
                    description="–ü–æ–∏—Å–∫ –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º —Ç–µ—Ä–º–∏–Ω–∞–º"),
            TestCase("—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫", "–ø–æ–∫–∞–∂–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø—Ä–æ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", 
                    ["–∑–∞–¥–∞—á"], ["–æ—à–∏–±–∫–∞"],
                    description="–ü–æ–∏—Å–∫ –ø–æ —Å–ª–æ–∂–Ω—ã–º —Ñ—Ä–∞–∑–∞–º"),
            TestCase("—Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫", "–Ω–∞–π–¥–∏ –∑–∞–¥–∞—á–∏ —Å –æ—à–∏–±–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", 
                    ["–∑–∞–¥–∞—á"], ["–æ—à–∏–±–∫–∞"],
                    description="–ü–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –ø—Ä–æ–±–ª–µ–º"),
        ]
        
        # ========================================
        # 6. –ê–ù–ê–õ–ò–¢–ò–ö–ê –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ê
        # ========================================
        analytics_tests = [
            TestCase("–∞–Ω–∞–ª–∏—Ç–∏–∫–∞", "—Å–∫–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á –≤ –ø—Ä–æ–µ–∫—Ç–µ ABC?", 
                    ["–∑–∞–¥–∞—á", "–æ—Ç–∫—Ä—ã—Ç"], ["–æ—à–∏–±–∫–∞"],
                    description="–ü–æ–¥—Å—á–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á"),
            TestCase("–∞–Ω–∞–ª–∏—Ç–∏–∫–∞", "—Å–∫–æ–ª—å–∫–æ –±–∞–≥–æ–≤ –∑–∞–∫—Ä—ã–ª–∏ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ?", 
                    ["–±–∞–≥", "–∑–∞–∫—Ä—ã—Ç"], ["–æ—à–∏–±–∫–∞"],
                    description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–∞–≥–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥"),
            TestCase("–∞–Ω–∞–ª–∏—Ç–∏–∫–∞", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º –≤ –ø—Ä–æ–µ–∫—Ç–µ XYZ", 
                    ["—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª"], ["–æ—à–∏–±–∫–∞"],
                    description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º"),
            TestCase("–∞–Ω–∞–ª–∏—Ç–∏–∫–∞", "—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω–æ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é?", 
                    ["–∑–∞–¥–∞—á", "—Å–æ–∑–¥–∞–Ω"], ["–æ—à–∏–±–∫–∞"],
                    description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–º –∑–∞–¥–∞—á–∞–º"),
            TestCase("–∞–Ω–∞–ª–∏—Ç–∏–∫–∞", "—Å—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞–¥–∞—á", 
                    ["–∑–∞–¥–∞—á", "–≤–æ–∑—Ä–∞—Å—Ç"], ["–æ—à–∏–±–∫–∞"],
                    description="–í–æ–∑—Ä–∞—Å—Ç –∑–∞–¥–∞—á"),
            TestCase("–∞–Ω–∞–ª–∏—Ç–∏–∫–∞", "—Ç–æ–ø 5 –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–¥–∞—á", 
                    ["–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª", "—Ç–æ–ø"], ["–æ—à–∏–±–∫–∞"],
                    description="–†–µ–π—Ç–∏–Ω–≥ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"),
        ]
        
        # ========================================
        # 7. –í–†–ï–ú–ï–ù–ù–´–ï –§–ò–õ–¨–¢–†–´
        # ========================================
        time_filter_tests = [
            TestCase("–≤—Ä–µ–º—è", "–∑–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è", 
                    ["–∑–∞–¥–∞—á"], ["–æ—à–∏–±–∫–∞"],
                    description="–ó–∞–¥–∞—á–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"),
            TestCase("–≤—Ä–µ–º—è", "–∑–∞–¥–∞—á–∏ –∑–∞ –≤—á–µ—Ä–∞", 
                    ["–∑–∞–¥–∞—á"], ["–æ—à–∏–±–∫–∞"],
                    description="–ó–∞–¥–∞—á–∏ –∑–∞ –≤—á–µ—Ä–∞"),
            TestCase("–≤—Ä–µ–º—è", "–∑–∞–¥–∞—á–∏ –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é", 
                    ["–∑–∞–¥–∞—á"], ["–æ—à–∏–±–∫–∞"],
                    description="–ó–∞–¥–∞—á–∏ –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é"),
            TestCase("–≤—Ä–µ–º—è", "–∑–∞–¥–∞—á–∏ –∑–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é", 
                    ["–∑–∞–¥–∞—á"], ["–æ—à–∏–±–∫–∞"],
                    description="–ó–∞–¥–∞—á–∏ –∑–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é"),
            TestCase("–≤—Ä–µ–º—è", "–∑–∞–¥–∞—á–∏ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü", 
                    ["–∑–∞–¥–∞—á"], ["–æ—à–∏–±–∫–∞"],
                    description="–ó–∞–¥–∞—á–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"),
            TestCase("–≤—Ä–µ–º—è", "–∑–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤ –∏—é–ª–µ", 
                    ["–∑–∞–¥–∞—á"], ["–æ—à–∏–±–∫–∞"],
                    description="–ó–∞–¥–∞—á–∏ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–µ—Å—è—Ü"),
            TestCase("–≤—Ä–µ–º—è", "–∑–∞–¥–∞—á–∏ –∑–∞ 2024 –≥–æ–¥", 
                    ["–∑–∞–¥–∞—á"], ["–æ—à–∏–±–∫–∞"],
                    description="–ó–∞–¥–∞—á–∏ –∑–∞ –≥–æ–¥"),
        ]
        
        # ========================================
        # 8. –ì–†–ê–§–ò–ö–ò –ò –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø
        # ========================================
        chart_tests = [
            TestCase("–≥—Ä–∞—Ñ–∏–∫–∏", "–ø–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∫–∞–∫ –≥—Ä–∞—Ñ–∏–∫", 
                    ["–≥—Ä–∞—Ñ–∏–∫", "—Å—Ç–∞—Ç—É—Å"], ["–æ—à–∏–±–∫–∞"],
                    description="–ì—Ä–∞—Ñ–∏–∫ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º"),
            TestCase("–≥—Ä–∞—Ñ–∏–∫–∏", "–∑–∞–¥–∞—á–∏ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º –ø–æ–∫–∞–∂–∏ –∫–∞–∫ –≥—Ä–∞—Ñ–∏–∫", 
                    ["–≥—Ä–∞—Ñ–∏–∫", "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª"], ["–æ—à–∏–±–∫–∞"],
                    description="–ì—Ä–∞—Ñ–∏–∫ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º"),
            TestCase("–≥—Ä–∞—Ñ–∏–∫–∏", "–¥–∏–Ω–∞–º–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á –∑–∞ –º–µ—Å—è—Ü –∫–∞–∫ –≥—Ä–∞—Ñ–∏–∫", 
                    ["–≥—Ä–∞—Ñ–∏–∫", "–¥–∏–Ω–∞–º–∏–∫–∞"], ["–æ—à–∏–±–∫–∞"],
                    description="–ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏"),
            TestCase("–≥—Ä–∞—Ñ–∏–∫–∏", "—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á –ø–æ–∫–∞–∂–∏ –∫–∞–∫ –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É", 
                    ["–≥—Ä–∞—Ñ–∏–∫", "—Ç–∏–ø"], ["–æ—à–∏–±–∫–∞"],
                    description="–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Ç–∏–ø–æ–≤"),
        ]
        
        # ========================================
        # 9. –ö–û–ú–ë–ò–ù–ò–†–û–í–ê–ù–ù–´–ï –ó–ê–ü–†–û–°–´
        # ========================================
        complex_tests = [
            TestCase("—Å–ª–æ–∂–Ω—ã–µ", "—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –∑–∞–∫—Ä—ã–ª–∏ –ø–æ –∫–ª–∏–µ–Ω—Ç—É –§–∏–ª–∏–ø—Å –≤ –∏—é–ª–µ?", 
                    ["–∑–∞–¥–∞—á", "–∑–∞–∫—Ä—ã—Ç", "–∏—é–ª—å"], ["–æ—à–∏–±–∫–∞"],
                    description="–ó–∞–¥–∞—á–∏ –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥", priority="high"),
            TestCase("—Å–ª–æ–∂–Ω—ã–µ", "–æ—Ç–∫—Ä—ã—Ç—ã–µ –±–∞–≥–∏ –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ ABC", 
                    ["–±–∞–≥", "–æ—Ç–∫—Ä—ã—Ç", "–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç"], ["–æ—à–∏–±–∫–∞"],
                    description="–°–ª–æ–∂–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è"),
            TestCase("—Å–ª–æ–∂–Ω—ã–µ", "–∑–∞–¥–∞—á–∏ –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π", 
                    ["–∑–∞–¥–∞—á", "–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª", "–¥–Ω–µ–π"], ["–æ—à–∏–±–∫–∞"],
                    description="–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é"),
            TestCase("—Å–ª–æ–∂–Ω—ã–µ", "–±–∞–≥–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º –ò–≤–∞–Ω", 
                    ["–±–∞–≥", "—Å–æ–∑–¥–∞–Ω", "–º–µ—Å—è—Ü"], ["–æ—à–∏–±–∫–∞"],
                    description="–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É, –≤—Ä–µ–º–µ–Ω–∏ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é"),
        ]
        
        # ========================================
        # 10. EDGE CASES –ò –û–®–ò–ë–ö–ò
        # ========================================
        edge_case_tests = [
            TestCase("–≥—Ä–∞–Ω–∏—á–Ω—ã–µ", "", 
                    [], [],
                    description="–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
            TestCase("–≥—Ä–∞–Ω–∏—á–Ω—ã–µ", "   ", 
                    [], [],
                    description="–¢–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª—ã"),
            TestCase("–≥—Ä–∞–Ω–∏—á–Ω—ã–µ", "–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–±–≤–≥–¥", 
                    ["–∑–∞–¥–∞—á"], ["–æ—à–∏–±–∫–∞"],  # –î–æ–ª–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å—Å—è –∫–∞–∫ Jira –∑–∞–ø—Ä–æ—Å
                    description="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"),
            TestCase("–≥—Ä–∞–Ω–∏—á–Ω—ã–µ", "–∑–∞–¥–∞—á–∏ –≤ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –ø—Ä–æ–µ–∫—Ç–µ ZZZZZZ", 
                    [], [],
                    description="–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç"),
            TestCase("–≥—Ä–∞–Ω–∏—á–Ω—ã–µ", "–æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å " + "—Å–ª–æ–≤–æ " * 100, 
                    [], [],
                    description="–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å"),
        ]
        
        # ========================================
        # 11. –†–ê–ó–õ–ò–ß–ù–´–ï –§–û–†–ú–£–õ–ò–†–û–í–ö–ò –û–î–ù–û–ì–û –ó–ê–ü–†–û–°–ê
        # ========================================
        variation_tests = [
            TestCase("–≤–∞—Ä–∏–∞—Ü–∏–∏", "–ø–æ–∫–∞–∂–∏ –º–æ–∏ –∑–∞–¥–∞—á–∏", 
                    ["–∑–∞–¥–∞—á"], ["–æ—à–∏–±–∫–∞"],
                    description="–í–∞—Ä–∏–∞—Ü–∏—è 1: –º–æ–∏ –∑–∞–¥–∞—á–∏"),
            TestCase("–≤–∞—Ä–∏–∞—Ü–∏–∏", "–¥–∞–π –º–Ω–µ —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –∑–∞–¥–∞—á", 
                    ["–∑–∞–¥–∞—á"], ["–æ—à–∏–±–∫–∞"],
                    description="–í–∞—Ä–∏–∞—Ü–∏—è 2: —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"),
            TestCase("–≤–∞—Ä–∏–∞—Ü–∏–∏", "–∫–∞–∫–∏–µ —É –º–µ–Ω—è –µ—Å—Ç—å –∑–∞–¥–∞—á–∏", 
                    ["–∑–∞–¥–∞—á"], ["–æ—à–∏–±–∫–∞"],
                    description="–í–∞—Ä–∏–∞—Ü–∏—è 3: –≤–æ–ø—Ä–æ—Å–Ω–∞—è —Ñ–æ—Ä–º–∞"),
            TestCase("–≤–∞—Ä–∏–∞—Ü–∏–∏", "—Ö–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–¥–∞—á–∏", 
                    ["–∑–∞–¥–∞—á"], ["–æ—à–∏–±–∫–∞"],
                    description="–í–∞—Ä–∏–∞—Ü–∏—è 4: –∂–µ–ª–∞–Ω–∏–µ"),
            TestCase("–≤–∞—Ä–∏–∞—Ü–∏–∏", "–º–Ω–µ –Ω—É–∂–Ω—ã –º–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏", 
                    ["–∑–∞–¥–∞—á"], ["–æ—à–∏–±–∫–∞"],
                    description="–í–∞—Ä–∏–∞—Ü–∏—è 5: –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å"),
        ]
        
        # ========================================
        # 12. –†–ê–ó–ù–´–ï –Ø–ó–´–ö–ò –ò –°–¢–ò–õ–ò
        # ========================================
        language_tests = [
            TestCase("—è–∑—ã–∫", "show my open tasks", 
                    ["–∑–∞–¥–∞—á"], [],
                    description="–ê–Ω–≥–ª–∏–π—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å"),
            TestCase("—è–∑—ã–∫", "–ü–û–ö–ê–ñ–ò –í–°–ï –ó–ê–î–ê–ß–ò", 
                    ["–∑–∞–¥–∞—á"], ["–æ—à–∏–±–∫–∞"],
                    description="–ó–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã"),
            TestCase("—è–∑—ã–∫", "–ø–æ–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –º–æ–∏ –∑–∞–¥–∞—á–∏", 
                    ["–∑–∞–¥–∞—á"], ["–æ—à–∏–±–∫–∞"],
                    description="–í–µ–∂–ª–∏–≤–∞—è —Ñ–æ—Ä–º–∞"),
            TestCase("—è–∑—ã–∫", "–∑–∞–¥–∞—á–∏ –ø–ª–∑", 
                    ["–∑–∞–¥–∞—á"], ["–æ—à–∏–±–∫–∞"],
                    description="–°–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞"),
        ]
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        all_tests = (management_tests + cache_tests + learning_tests + 
                    search_tests + text_search_tests + analytics_tests + 
                    time_filter_tests + chart_tests + complex_tests + 
                    edge_case_tests + variation_tests + language_tests)
        
        return all_tests
    
    async def test_query(self, test_case: TestCase) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å"""
        start_time = time.time()
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç MessageProcessor
            from app.services.message_processor import MessageProcessor
            
            processor = MessageProcessor()
            response = await processor.process_message(self.test_user_id, test_case.query)
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Jira" in response and self.auth_credentials:
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
                print(f"‚ö†Ô∏è  –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ—Ç–µ—Ä—è–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ '{test_case.query[:30]}...', –ø–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
                auth_success = await self.authorize_in_jira(self.auth_credentials)
                
                if auth_success:
                    # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                    response = await processor.process_message(self.test_user_id, test_case.query)
                    print(f"üîÑ –¢–µ—Å—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
            
            response_time = (time.time() - start_time) * 1000
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            success = True
            error_msg = ""
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            if test_case.expected_keywords:
                for keyword in test_case.expected_keywords:
                    if keyword.lower() not in response.lower():
                        success = False
                        error_msg += f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: '{keyword}'. "
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤
            if test_case.should_not_contain:
                for keyword in test_case.should_not_contain:
                    if keyword.lower() in response.lower():
                        success = False
                        error_msg += f"–ù–∞–π–¥–µ–Ω–æ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ: '{keyword}'. "
            
            result = {
                "test_case": test_case,
                "response": response,
                "response_time_ms": response_time,
                "success": success,
                "error_msg": error_msg.strip(),
                "timestamp": datetime.now().isoformat()
            }
            
            return result
            
        except Exception as e:
            return {
                "test_case": test_case,
                "response": f"–ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {str(e)}",
                "response_time_ms": (time.time() - start_time) * 1000,
                "success": False,
                "error_msg": f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}",
                "timestamp": datetime.now().isoformat()
            }
    
    async def run_all_tests(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        test_cases = self.get_test_cases()
        print(f"üß™ –ó–∞–ø—É—Å–∫ {len(test_cases)} —Ç–µ—Å—Ç–æ–≤...")
        print()
        
        results = []
        categories = {}
        
        for i, test_case in enumerate(test_cases, 1):
            print(f"[{i:3d}/{len(test_cases)}] {test_case.category:15} | {test_case.query[:50]:<50}")
            
            result = await self.test_query(test_case)
            results.append(result)
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            if test_case.category not in categories:
                categories[test_case.category] = {"total": 0, "passed": 0, "failed": 0}
            
            categories[test_case.category]["total"] += 1
            if result["success"]:
                categories[test_case.category]["passed"] += 1
                print(f"                   ‚úÖ PASSED ({result['response_time_ms']:.0f}ms)")
            else:
                categories[test_case.category]["failed"] += 1
                print(f"                   ‚ùå FAILED: {result['error_msg']}")
                if len(result["response"]) > 100:
                    print(f"                      –û—Ç–≤–µ—Ç: {result['response'][:100]}...")
                else:
                    print(f"                      –û—Ç–≤–µ—Ç: {result['response']}")
            print()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_tests = len(results)
        passed_tests = sum(1 for r in results if r["success"])
        failed_tests = total_tests - passed_tests
        
        average_response_time = sum(r["response_time_ms"] for r in results) / len(results)
        
        summary = {
            "total_tests": total_tests,
            "passed_tests": passed_tests,
            "failed_tests": failed_tests,
            "success_rate": (passed_tests / total_tests) * 100,
            "average_response_time_ms": average_response_time,
            "categories": categories,
            "results": results,
            "timestamp": datetime.now().isoformat()
        }
        
        return summary
    
    def print_summary(self, summary: Dict[str, Any]):
        """–í—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        print("=" * 80)
        print("üéØ –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 80)
        print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if self.auth_credentials:
            print(f"üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –∫–∞–∫ {self.auth_credentials['login']}")
        else:
            print(f"üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: ‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (—Ç–µ—Å—Ç–∏—Ä—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)")
        print()
        
        print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {summary['total_tests']}")
        print(f"   ‚Ä¢ –ü—Ä–æ—à–ª–∏: {summary['passed_tests']} ‚úÖ")
        print(f"   ‚Ä¢ –ü—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å: {summary['failed_tests']} ‚ùå")
        print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {summary['success_rate']:.1f}%")
        print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {summary['average_response_time_ms']:.0f}ms")
        print()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —É—á–µ—Ç–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_required_fails = 0
        real_fails = 0
        
        for result in summary['results']:
            if not result['success']:
                response = result['response']
                if "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Jira" in response:
                    auth_required_fails += 1
                else:
                    real_fails += 1
        
        if not self.auth_credentials and auth_required_fails > 0:
            print(f"üîç –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
            print(f"   ‚Ä¢ –†–µ–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏: {real_fails}")
            print(f"   ‚Ä¢ –¢—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {auth_required_fails}")
            print(f"   ‚Ä¢ –†–µ–∞–ª—å–Ω–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å: {((summary['passed_tests'] + auth_required_fails) / summary['total_tests'] * 100):.1f}%")
            print()
        
        print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        for category, stats in summary['categories'].items():
            success_rate = (stats['passed'] / stats['total']) * 100
            print(f"   ‚Ä¢ {category:20} {stats['passed']:2d}/{stats['total']:2d} ({success_rate:5.1f}%)")
        print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—É—Å–ø–µ—à–Ω—ã–µ —Ç–µ—Å—Ç—ã
        failed_tests = [r for r in summary['results'] if not r['success']]
        if failed_tests:
            print(f"‚ùå –ü—Ä–æ–≤–∞–ª–∏–≤—à–∏–µ—Å—è —Ç–µ—Å—Ç—ã ({len(failed_tests)}):")
            for result in failed_tests:
                tc = result['test_case']
                print(f"   ‚Ä¢ [{tc.category}] {tc.query[:60]}")
                print(f"     –û—à–∏–±–∫–∞: {result['error_msg']}")
                if tc.priority == "critical":
                    print("     ‚ö†Ô∏è  –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢!")
                print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        slow_tests = [r for r in summary['results'] if r['response_time_ms'] > 5000]
        if slow_tests:
            print(f"üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã (>5—Å, {len(slow_tests)} —à—Ç.):")
            for result in sorted(slow_tests, key=lambda x: x['response_time_ms'], reverse=True):
                tc = result['test_case']
                print(f"   ‚Ä¢ {result['response_time_ms']:.0f}ms | {tc.query[:50]}")
            print()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(description='–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Ask Bot')
    parser.add_argument('--auth', action='store_true', 
                       help='–ó–∞–ø—Ä–æ—Å–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Jira')
    parser.add_argument('--login', type=str, 
                       help='–õ–æ–≥–∏–Ω –¥–ª—è Jira (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å --password)')
    parser.add_argument('--password', type=str, 
                       help='–ü–∞—Ä–æ–ª—å/—Ç–æ–∫–µ–Ω –¥–ª—è Jira (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å --login)')
    parser.add_argument('--no-auth', action='store_true',
                       help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏')
    
    args = parser.parse_args()
    
    print("üöÄ Ask Bot - –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("=" * 50)
    print()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    with_auth = args.auth or (args.login and args.password)
    
    if not args.no_auth and not with_auth:
        print("üí° –û–ü–¶–ò–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("   1. –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–±–µ–∑ Jira) - –Ω–∞–∂–º–∏—Ç–µ ENTER")
        print("   2. –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (—Å Jira) - –≤–≤–µ–¥–∏—Ç–µ 'auth'")
        print()
        
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º [ENTER/auth]: ").strip().lower()
        with_auth = choice in ['auth', 'a', '–¥–∞', 'yes', 'y']
    
    tester = BotTester(with_auth=with_auth)
    
    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–∞
    if with_auth:
        credentials = tester.get_auth_credentials(args.login, args.password)
        if credentials:
            auth_success = await tester.authorize_in_jira(credentials)
            if not auth_success:
                print()
                print("‚ö†Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏? [y/N]: ", end="")
                continue_without_auth = input().strip().lower()
                if continue_without_auth not in ['y', 'yes', '–¥–∞']:
                    print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                    return 1
                print()
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return 1
    
    summary = await tester.run_all_tests()
    tester.print_summary(summary)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
    with open(f"test_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json", "w", encoding="utf-8") as f:
        json.dump(summary, f, ensure_ascii=False, indent=2, default=str)
    
    print("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ test_results_YYYYMMDD_HHMMSS.json")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    if summary['failed_tests'] == 0:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        return 0
    else:
        print(f"\n‚ö†Ô∏è  {summary['failed_tests']} –¢–ï–°–¢–û–í –ü–†–û–í–ê–õ–ò–õ–ò–°–¨")
        return 1

if __name__ == "__main__":
    import sys
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
